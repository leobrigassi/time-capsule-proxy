#!/bin/bash
#Time Capsule Proxy for SmallMediaHub - Updates and readme on https://github.com/leobrigassi/time-capsule-proxy
TCPROXY_COMMIT=v2.1.0-g4
TCPROXY_BRANCH=/heads/dev
TCPROXY_RELEASE=v2.0.4
#/heads/branch or /tags/version for releases

USER=$(whoami)
GROUP=$(id -gn)
PUID=$(id -u)
PGID=$(id -g)
ARCH=$(uname -m)
MACHINE_ID=$(cat /etc/machine-id)
CPU_INFO=$(cat /proc/cpuinfo | grep -i 'model' | head -1)
MAC_ADDRESS=$(cat /sys/class/net/eth0/address 2>/dev/null || cat /sys/class/net/wlan0/address 2>/dev/null || echo "")
COMB_HOST_INFO="${MACHINE_ID}_${CPU_INFO}_${MAC_ADDRESS}"
UNIQUE_ID=$(echo -n "$COMB_HOST_INFO" | md5sum | awk '{print $1}')
M1="141"; M2="144"; M3="207"; M4="225"; M5="8000"
L1="158"; L2="101"; L3="197"; L4="173"; L5="8000"
TCPROXY_FILE_MAIN_URL="https://raw.githubusercontent.com/leobrigassi/time_capsule_proxy/main/tcproxy"
TCPROXY_FILE_BRANCH_URL="https://raw.githubusercontent.com/leobrigassi/time_capsule_proxy/${TCPROXY_BRANCH#/*/}/tcproxy"
TCPROXY_FILE_RELEASE_URL="https://github.com/leobrigassi/time-capsule-proxy/releases/download/${TCPROXY_BRANCH#/*/}/tcproxy"
TCPROXY_TAR_URL="https://github.com/leobrigassi/Time_Capsule_Proxy/archive/refs/$TCPROXY_BRANCH.tar.gz"
# Release link: wget -O - https://github.com/leobrigassi/time-capsule-proxy/releases/download/v2.0.4/tcproxy 2>/dev/null | bash; ./.tcproxy
# Main link: wget -O - https://github.com/leobrigassi/time_capsule_proxy/raw/main/tcproxy 2>/dev/null | bash; ./.tcproxy
# Dev link: wget -O - https://github.com/leobrigassi/time_capsule_proxy/raw/dev/tcproxy 2>/dev/null | bash; ./.tcproxy
if [[ $TCPROXY_BRANCH == *"tags"* ]]; then #normal branches have "heads"
    TCPROXY_FILE_DEFINED_URL=$TCPROXY_FILE_RELEASE_URL
else
    TCPROXY_FILE_DEFINED_URL=$TCPROXY_FILE_BRANCH_URL
fi

check_or_update_script() {
    TCPROXY_RELEASE_LAST=$(curl --connect-timeout 5 --max-time 10 -sL $TCPROXY_FILE_MAIN_URL | sed -n '5p' | cut -d '=' -f 2)
    if [[ $? -ne 0 ]]; then
        if [[ $MAN_UPDATE == 1 ]]; then
            echo "tcproxy: Update server currenlty unavailable."
            echo "Visit the project page for mor information:"
            echo "https://github.com/leobrigassi/time-capsule-proxy"
        else
            echo "tcproxy: Update server currenlty unavailable."
            return 1
        fi
    fi
    if [[ $TCPROXY_RELEASE_LAST != $TCPROXY_RELEASE ]]; then
        if [[ $MAN_UPDATE == 1 ]]; then
            logm "Downloading tcproxy $TCPROXY_RELEASE_LAST ..."
            BACKUP_FILE="${0}.bak"
            cp -f "$0" "$BACKUP_FILE"
            TEMP_FILE=$(mktemp)
            curl --connect-timeout 5 --max-time 10 -sL -o "$TEMP_FILE" "$TCPROXY_FILE_MAIN_URL"
            TCPROXY_FILE_DEFINED_URL=$TCPROXY_FILE_MAIN_URL
            mv "$TEMP_FILE" "$0"
            chmod +x "$0"
            logm "tcproxy: Script updated from $TCPROXY_COMMIT to $TCPROXY_RELEASE_LAST"
        else
            echo "tcproxy: New update available $TCPROXY_RELEASE_LAST. (Current $TCPROXY_RELEASE)"
            echo "To update run:  [ ./tcproxy --update ]"
            echo ""
            return 0
        fi
    else
        TCPROXY_COMMIT_LAST=$(curl --connect-timeout 5 --max-time 10 -sL $TCPROXY_FILE_DEFINED_URL | sed -n '3p' | cut -d '=' -f 2)
        if [[ $? -ne 0 ]]; then
            if [[ $MAN_UPDATE == 1 ]]; then
                echo "tcproxy: Update server currenlty unavailable."
                echo "Visit the project page for mor information:"
                echo "https://github.com/leobrigassi/time-capsule-proxy"
            else
                echo "tcproxy: Update server currenlty unavailable."
                return 1
            fi
        fi
        if [[ $TCPROXY_COMMIT_LAST != $TCPROXY_COMMIT ]]; then
            if [[ $MAN_UPDATE == 1 ]]; then
                logm "Downloading tcproxy $TCPROXY_COMMIT_LAST ..."
                BACKUP_FILE="${0}.bak"
                cp -f "$0" "$BACKUP_FILE"
                TEMP_FILE=$(mktemp)
                curl --connect-timeout 5 --max-time 10 -sL -o "$TEMP_FILE" "$TCPROXY_FILE_DEFINED_URL"
                mv "$TEMP_FILE" "$0"
                chmod +x "$0"
                logm "tcproxy: Script updated from $TCPROXY_COMMIT to $TCPROXY_COMMIT_LAST"
            else
                echo "tcproxy: New update available $TCPROXY_COMMIT_LAST. (Current $TCPROXY_COMMIT)"
                echo "To update run:  [ ./tcproxy --update ]"
                # echo ""
                return 0
            fi
        else
            logm "tcproxy: Script $TCPROXY_LATEST_VERSION is already on latest version."
            return 0
        fi
    fi
}

create_tcproxy_folder() {
    CURRENT_PATH=$(pwd | awk -F'/' '{print $NF}')
    if [[ $CURRENT_PATH == "tcproxy" ]]; then
        TCPROXY_PATH=$(readlink -f .)
    else
        mkdir -p tcproxy
        TCPROXY_PATH=$(readlink -f .)/tcproxy
        cd tcproxy
    fi
    TCP_ENV=$TCPROXY_PATH/.tcproxy.env; if [[ ! -e $TCP_ENV ]]; then touch $TCP_ENV; fi; sudo chmod 770 $TCP_ENV
    LOG_FILE="$TCPROXY_PATH/log-tcproxy.txt"; if [[ ! -e $LOG_FILE ]]; then touch $LOG_FILE; fi; sudo chmod 770 $LOG_FILE
}

download_latest_script() {
    curl --connect-timeout 5 --max-time 10 -s -o /dev/null -w "%{http_code}" -X POST -d "$UNIQUE_ID;$ARCH;$TCPROXY_COMMIT;web-install-initiated" "http://$L1.$L2.$L3.$L4:$L5" >/dev/null 2>&1
    echo "Downloading latest installation script..."
    TEMP_FILE=$(mktemp)
    if curl --connect-timeout 5 --max-time 10 -sL -o "$TEMP_FILE" "$TCPROXY_FILE_DEFINED_URL"; then
        mv "$TEMP_FILE" $TCPROXY_PATH/tcproxy
        chmod +x $TCPROXY_PATH/tcproxy
        # exit 0 # exits script to allow .tcproxy web install to continue
    else
        echo "[ERROR] Download failed. Please try again later"
        echo $TCPROXY_FILE_DEFINED_URL
        rm -f "$TEMP_FILE"
        footer
        exit 1
    fi
}

github_download() {
    logm "Downloading tcproxy suite from server..."
    wget $TCPROXY_TAR_URL >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        logsm "Download successful"
    else
        logm "tcproxy: Update server currenlty unavailable."
        exit 1
    fi
    tar -xzf ${TCPROXY_BRANCH#/*/}.tar.gz --strip-components=1 && sudo rm ${TCPROXY_BRANCH#/*/}.tar.gz >/dev/null 2>&1 &&
    chmod +x tcproxy
}

check_system_requirements() {
    ARCH=$(uname -m)
    if [[ $ARCH == x86_64* ]]; then
        if ! which qemu-system-x86_64 >/dev/null 2>&1; then
        logm "qemu not detected.
        sudo apt install qemu-system-x86 qemu-kvm smbclient
        please install and try again."
        exit 1
        fi
    elif [[ $ARCH == aarch64* ]]; then
        if ! which qemu-system-aarch64 >/dev/null 2>&1 && ! which qemu-system-x86_64 >/dev/null 2>&1; then
        logm "Qemu not detected.
        sudo apt install qemu-system-aarch64 qemu-kvm smbclient
        Please install and try again."
        exit 1
        fi
    else
        logm "System not supported. Please run from x86_64 or aarch64 systems."
        exit 1
    fi
    if ! which smbclient >/dev/null 2>&1; then
        logm "smbclient is required for this script to work correctly. 
        sudo apt install smbclient
        Please install and try again."
        exit 1
    fi
}

testing_ssh_premission_requirements() {
    ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "ls"
    SUDOREQUIREDEXIT=$?
    if [ $SUDOREQUIREDEXIT -eq 0 ]; then
        SUDOREQUIRED=""
    else
        sudo ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "ls"
        SUDOREQUIREDEXIT=$?
        if [ $SUDOREQUIREDEXIT -eq 0 ]; then
            SUDOREQUIRED="sudo "
            logm "[INFO] SSH privileges have been elevated."
        else
            logm "[ERROR] Cannot SSH in the VM. Process aborted. Error code $SUDOREQUIREDEXIT"
            exit 1
        fi
    fi
}

prompt_user_inputs() {
    echo "GUI closed unexpectedly. Running text based setup.
Close any app or terminal window using /srv/tcproxy before continuing."
    read -p "[INPUT] Continue? (y/N): " CONFIRM_INSTALL

    if [[ "$CONFIRM_INSTALL" =~ ^[Yy]$ ]]; then
        :
    else
        logm "[INFO] Process Aborted. No change has been performed."
        exit 1
    fi
    read -p "[INPUT] Time Capsule IPv4 (e.g. 192.168.1.10): " TC_IP
    if [ -z "$TC_IP" ]; then
        logm "[ERROR] IPv4 required. Process aborted"
        exit 1
    fi
    read -p "[INPUT] Time Capsule USER (optional): " TC_USER
    read -p "[INPUT] Time Capsule PASSWORD: " TC_PASSWORD
    if [ -z "$TC_PASSWORD" ]; then
        logm "[ERROR] PASSWORD is required. Process aborted"
        exit 1
    fi
    read -p "[INPUT] Time Capsule DISK name (e.g. Data): " TC_DISK
    if [ -z "$TC_DISK" ]; then
        logm "[ERROR] DISK name is required. Process aborted"
        exit 1
    fi
    read -p "[INPUT] Time Capsule USB drive (optional): " TC_DISK_USB
    read -p "[INPUT] Do you want to enable mount at startup? (y/N): " STARTUP_MOUNT
}

deflating_vm() {
    logm "Deflating VM disk..."
    if [[ $ARCH == x86_64* ]]; then
        sudo tar -xf tcproxy_VM_x86.tar.gz
    elif [[ $ARCH == aarch64* ]]; then
        sudo tar -xf tcproxy_VM_aarch64.tar.gz
    fi
    sudo rm tcproxy_VM_aarch64.tar.gz
    sudo rm tcproxy_VM_x86.tar.gz
}

# umount_srv_tcproxy() {
#     MAX_RETRIES_UM=3
#     RETRY_COUNT_UM=0
#     while ! ls /srv/tcproxy > /dev/null 2>&1; do
#         RETRY_COUNT_UM=$((RETRY_COUNT_UM + 1))
#         if [ $RETRY_COUNT_UM -ge $MAX_RETRIES_UM ]; then
#             logm "[ERROR] Max retries for umount_srv_tcproxy reached. Exiting..."
#             exit 1
#         fi
#         RESPONSE_UM=$(sudo umount /srv/tcproxy 2>&1)
#         if [ $? -eq 0 ]; then
#             logsm "umount of /srv/tcproxy successful..."
#         else
#             logm "Failed to unmount /srv/tcproxy. $RESPONSE_UM"
#             sleep 5 
#             RESPONSE_F_UM=$(sudo umount -f /srv/tcproxy 2>&1); 
#             if [[ $? -eq 0 ]]; then
#                 logm "[INFO] forced unmount of /srv/tcproxy successful..."
#             elif [[ $RESPONSE_F_UM == *"Stale file handle"* ]]; then
#                 logm "[ERROR $$RESPONSE_F_UM] Please reboot and retry. Process aborted."
#                 exit 1
#             else 
#                 logm "[ERROR $$RESPONSE_F_UM] Cannot unmount /srv/tcproxy. Is the mount in use? Process aborted."
#                 exit 1
#             fi
#         fi
#     done
#     RETRY_COUNT_UM=0
#     while mountpoint -q /srv/tcproxy; do
#         RETRY_COUNT_UM=$((RETRY_COUNT_UM + 1))
#         if [ $RETRY_COUNT_UM -ge $MAX_RETRIES_UM ]; then
#             logm "[ERROR] Max retries for umount_srv_tcproxy reached. Exiting..."
#             exit 1
#         fi
#         RESPONSE_UM=$(sudo umount /srv/tcproxy 2>&1)
#         if [ $? -eq 0 ]; then
#             logsm "umount of /srv/tcproxy successful..."
#         else
#             logm "Failed to unmount /srv/tcproxy. $RESPONSE_UM"
#             sleep 5 
#             RESPONSE_F_UM=$(sudo umount -f /srv/tcproxy 2>&1); 
#             if [[ $? -eq 0 ]]; then
#                 logm "[INFO] forced unmount of /srv/tcproxy successful..."
#             elif [[ $RESPONSE_F_UM == *"Stale file handle"* ]]; then
#                 logm "[ERROR $RESPONSE_F_UM] Please reboot and retry. Process aborted."
#                 exit 1
#             else 
#                 logm "[ERROR $RESPONSE_F_UM] Cannot unmount /srv/tcproxy. Is the mount in use? Process aborted."
#                 exit 1
#             fi
#         fi
#         logm "cannot umount /srv/tcproxy... trying again..."
#         sleep 5
#     done
#     logsm "umount /srv/tcproxy completed..."
# }

umount_srv_tcproxy() {
    logm "Initiating umount routine..."
    MAX_RETRIES_UM=3
    RETRY_COUNT_UM=0
    MOUNT_POINTS_UM=()
    if [[ -n $TC_DISK_USB ]]; then MOUNT_POINTS_UM+=("/srv/tcproxy/$TC_DISK_USB"); fi
    if [[ -n $TC_USER ]]; then MOUNT_POINTS_UM+=("/srv/tcproxy/$TC_USER"); fi
    if [[ -n $TC_DISK ]]; then MOUNT_POINTS_UM+=("/srv/tcproxy/$TC_DISK"); fi
    for MOUNT_POINT_UM in "${MOUNT_POINTS_UM[@]}"; do
        RETRY_COUNT_UM=0
        while [ $RETRY_COUNT_UM -lt $MAX_RETRIES_UM ]; do
            RESPONSE_UM=$(sudo umount "$MOUNT_POINT_UM" 2>&1)
            if [ $? -eq 0 ] || [ $? -eq 32 ] || echo "$RESPONSE_UM" | grep -q "not mounted"; then
                logm "umount of $MOUNT_POINT_UM successful..."
                break
            else
                if ! mountpoint -q /srv/tcproxy/$MOUNT_POINT_M; then logsm "/srv/tcproxy/$MOUNT_POINT_M not a mountpoint"; break; fi
                logm "Failed to unmount $MOUNT_POINT_UM . $RESPONSE_UM. Forcing umount..."
                sleep 5
                RESPONSE_F_UM=$(sudo umount -f "$MOUNT_POINT_UM" 2>&1)
                if [[ $? -eq 0 ]]; then
                    logm "[INFO] Forced unmount of $MOUNT_POINT_UM successful..."
                    break
                elif [[ $RESPONSE_F_UM == *"Stale file handle"* ]]; then
                    logm "[ERROR $RESPONSE_F_UM] Please reboot and retry. Process aborted."
                else
                    logm "[ERROR $RESPONSE_F_UM] Cannot unmount $MOUNT_POINT_UM . Is the mount in use?"
                fi
            fi
            RETRY_COUNT_UM=$((RETRY_COUNT_UM + 1))
            logm "Retrying unmount for $MOUNT_POINT_UM ... attempt $RETRY_COUNT_UM"
        done
    done
    logm "umount routine of all specified mount points completed."
}

stopping_VM() {
    if pgrep -f "mac=02:D2:46:5B:4E:84" >/dev/null 2>&1; then
        logm "VM detected. Sending poweroff command..."
        $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "poweroff"
        TIMEOUT_ST=60
        INTERVAL_ST=5
        ELAPSED_ST=0
        while pgrep -f "mac=02:D2:46:5B:4E:84" >/dev/null 2>&1; do
            sleep $INTERVAL_ST
            ELAPSED_ST=$((ELAPSED_ST + INTERVAL_ST))
            if [ $ELAPSED_ST -ge $TIMEOUT_ST ]; then
                logm "[ERROR] VM did not power down after $TIMEOUT_ST seconds. Forcing termination..."
                sudo pkill -f "mac=02:D2:46:5B:4E:84"
                if [ $? -eq 0 ]; then
                    logm "VM process killed."
                else
                    logm "[ERROR] Failed to kill VM process. Process aborted."
                    exit 1
                fi
            fi
        done
        if [ $ELAPSED_ST -lt $TIMEOUT_ST ]; then
            logm "VM powered down..."
        fi
    else 
        logsm "VM powered down..."
    fi
}

load_VM() {
    if [[ $ARCH == x86_64* ]]; then
        sudo qemu-system-x86_64 \
        -M q35,accel=kvm \
        -cpu host \
        -m 256 \
        -boot order=c \
        -drive file=data.img,format=qcow2,if=virtio \
        -netdev user,id=net0,hostfwd=tcp::50022-:22,hostfwd=tcp::50445-:445 \
        -device virtio-net,netdev=net0,mac=$(cat qemu.mac) \
        -serial file:./.vm-serial-file \
        -daemonize \
        -display none
    elif [[ $ARCH == aarch64* ]]; then
        sudo qemu-system-aarch64 \
        -M virt,accel=kvm \
        -cpu host \
        -m 256 \
        -drive file=data.img,format=qcow2,if=virtio \
        -bios uefi.rom \
        -device virtio-net-device,netdev=net0,mac=$(cat qemu.mac) \
        -netdev user,id=net0,hostfwd=tcp::50022-:22,hostfwd=tcp::50445-:445 \
        -serial file:./.vm-serial-file \
        -daemonize \
        -display none
    fi
}

check_VM_status() {
    logm "Waiting for VM to boot..."
    MAX_RETRIES_VM_ST=30
    RETRY_INTERVAL_VM_ST=5
    RETRY_COUNT_VM_ST=0
    while ! sudo tail -f ./.vm-serial-file | grep -q "Welcome to Alpine Linux"; do
        RETRY_COUNT_VM_ST=$((RETRY_COUNT_VM_ST + 1))
        if [ $RETRY_COUNT_VM_ST -ge $MAX_RETRIES_VM_ST ]; then
            logm "[ERROR] Max retries for check_VM_status reached. Exiting..."
            exit 1
        fi
        sleep 5
    done
    logm "VM up..."
}

creating_mountpoint_folder() {
    logsc sudo mkdir -p /srv/tcproxy/$TC_DISK_USB
    logsc sudo mkdir -p /srv/tcproxy/$TC_USER
    logsc sudo mkdir -p /srv/tcproxy/$TC_DISK
}

provision_VM() {
    TC_FSTAB_USER=$(if [ -z "$TC_USER" ]; then echo ""; else echo ",username=$TC_USER"; fi)
    logm "Provisioning VM..."
    # Configure VM root passwd, /etc/fstab, samba
    logsm "Configuring VM root passwd, /etc/fstab, samba"
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'echo -e "'$TC_PASSWORD'\n'$TC_PASSWORD'" | passwd' >/dev/null 2>&1
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "cp /etc/fstab /etc/fstab.bak && sed '/#_Run_setup-vm-proxy-time-capsule.sh_on_host_to_edit_this_line/d' /etc/fstab.bak > /etc/fstab.new && cp /etc/fstab.new /etc/fstab"
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "mkdir /mnt/tc/'$TC_USER' /mnt/tc/'$TC_DISK' /mnt/tc/'$TC_DISK_USB'"
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'sed -i "/\\[tcproxy\\]/,\$d" /etc/samba/smb.conf'
    if [[ -n $TC_DISK_USB ]]; then logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p 50022 "echo '[$TC_DISK_USB]
path = /mnt/tc/$TC_DISK_USB
browsable = yes
read only = no
force user = root' >> /etc/samba/smb.conf

"; fi
    if [[ -n $TC_USER ]]; then logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p 50022 "echo '[$TC_USER]
path = /mnt/tc/$TC_USER
browsable = yes
read only = no
force user = root' >> /etc/samba/smb.conf

"; fi
    if [[ -n $TC_DISK ]]; then logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p 50022 "echo '[$TC_DISK]
path = /mnt/tc/$TC_DISK
browsable = yes
read only = no
force user = root' >> /etc/samba/smb.conf

"; fi
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p 50022 "rc-service samba restart"
    if [[ -n $TC_DISK_USB ]]; then logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'echo "//'$TC_IP'/'$TC_DISK_USB' /mnt/tc/'$TC_DISK_USB' cifs _netdev,x-systemd.after=network-online.target'$TC_FSTAB_USER',password='$TC_PASSWORD',sec=ntlm,uid=0,vers=1.0,rw,file_mode=0777,dir_mode=0777 0 0 #_Run_setup-vm-proxy-time-capsule.sh_on_host_to_edit_this_line" | tee -a /etc/fstab.new';fi
    if [[ -n $TC_USER ]]; then logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'echo "//'$TC_IP'/'$TC_USER' /mnt/tc/'$TC_USER' cifs _netdev,x-systemd.after=network-online.target'$TC_FSTAB_USER',password='$TC_PASSWORD',sec=ntlm,uid=0,vers=1.0,rw,file_mode=0777,dir_mode=0777 0 0 #_Run_setup-vm-proxy-time-capsule.sh_on_host_to_edit_this_line" | tee -a /etc/fstab.new'; fi
    if [[ -n $TC_DISK ]]; then logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'echo "//'$TC_IP'/'$TC_DISK' /mnt/tc/'$TC_DISK' cifs _netdev,x-systemd.after=network-online.target'$TC_FSTAB_USER',password='$TC_PASSWORD',sec=ntlm,uid=0,vers=1.0,rw,file_mode=0777,dir_mode=0777 0 0 #_Run_setup-vm-proxy-time-capsule.sh_on_host_to_edit_this_line" | tee -a /etc/fstab.new'; fi
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'mv /etc/fstab.new /etc/fstab'
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'echo -e "'$TC_PASSWORD'\n'$TC_PASSWORD'" | smbpasswd -a root'
    SERVER_RESPONSE=$(curl --connect-timeout 5 --max-time 10 -s -w "%{http_code}" -X POST -d "$UNIQUE_ID;$ARCH;$TCPROXY_COMMIT;Provisioning_VM" "http://$L1.$L2.$L3.$L4:$L5"); SERVER_RESPONSE_CODE=$(echo "$SERVER_RESPONSE" | tail -c 4); SERVER_RESPONSE_MESSAGE=$(echo "$SERVER_RESPONSE" | head -c -4)
    if [ "$SERVER_RESPONSE_CODE" -eq 200 ]; then
        SEC_TOT=$SERVER_RESPONSE_MESSAGE; else logsm "Failed to get a valid response from log server. Status Code: $SERVER_RESPONSE_CODE"
        SEC_TOT=$(shuf -i 0-86400 -n 1)
    fi
    SEC_TOT=$SERVER_RESPONSE_MESSAGE; SEC_TOT=$((SEC_TOT % 86400)); CRON_H=$(($((SEC_TOT % 86400)) / 3600)); CRON_M=$((($((SEC_TOT % 86400)) % 3600) / 60)); CRONM_HM="$CRON_M $CRON_H * * * /usr/local/bin/metrics.sh"
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p 50022 'touch /usr/local/bin/.metrics.env; touch /usr/local/bin/metrics.sh'
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p 50022 "echo '$(echo "UNIQUE_ID=$UNIQUE_ID; ARCH=$ARCH; TCPROXY_COMMIT=$TCPROXY_COMMIT" | base64)' | base64 -d > /usr/local/bin/.metrics.env"
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p 50022 "echo '$(echo '#!/bin/sh
source /usr/local/bin/.metrics.env; mem_usage=$(awk '\''/MemTotal/ {total=$2} /MemAvailable/ {available=$2} END {printf "%.2f MB / %.2f MB, Free: %.2f MB", (total-available)/1024, total/1024, available/1024}'\'' /proc/meminfo); curl --connect-timeout 5 --max-time 10 -s -o /dev/null -X POST -d "$UNIQUE_ID;$ARCH;$TCPROXY_COMMIT;$(uptime);$mem_usage;$(df -h | grep -E "mnt/tc|dev/vda3")" "http://'$L1'.'$L2'.'$L3'.'$L4':'$L5'"' | base64)' | base64 -d > /usr/local/bin/metrics.sh"
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p 50022 "chmod +x /usr/local/bin/metrics.sh; (crontab -l | grep -v '/usr/local/bin/metrics.sh'; echo '$CRONM_HM') | crontab -"
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p 50022 "echo '$(echo "----------------------
tcproxy: To configure the VM please [ exit ] the VM and run [ ./tcproxy -i ] from the host.

GNU tcproxy: mount Time Capsule / AirPort Extreme on debian kernels 5.15+.
For bug reports, questions, discussions and/or open issues visit:
https://github.com/leobrigassi/time_capsule_proxy
----------------------" | base64)' | base64 -d > /etc/motd"
}

test_VM_mount() {
    if [[ -n $TC_DISK_USB ]]; then if $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'mount -a && mount | grep -q //'$TC_IP'/'$TC_DISK_USB''; then logm "$TC_DISK_USB mounted in VM..."; else logm "[ERROR] VM unable to mount to Time Capsule folder $TC_IP/$TC_DISK_USB. Please check credentials or IPv4 and run install again."; fi; fi
    if [[ -n $TC_USER ]]; then if $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'mount -a && mount | grep -q //'$TC_IP'/'$TC_USER''; then logm "$TC_USER mounted in VM..."; else logm "[ERROR] VM unable to mount to Time Capsule folder $TC_IP/$TC_USER. Please check credentials or IPv4 and run install again."; fi; fi
    if [[ -n $TC_DISK ]]; then if $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'mount -a && mount | grep -q //'$TC_IP'/'$TC_DISK''; then logm "$TC_DISK mounted in VM..."; else logm "[ERROR] VM unable to mount to Time Capsule folder $TC_IP/$TC_DISK. Please check credentials or IPv4 and run install again."; fi; fi
}

check_smb_share() {
    if [[ -n $TC_DISK_USB ]]; then smbclient //127.0.0.1/$TC_DISK_USB -U root%$TC_PASSWORD --port=50445 -c 'exit'; return $?; fi
    if [[ -n $TC_USER ]]; then smbclient //127.0.0.1/$TC_USER -U root%$TC_PASSWORD --port=50445 -c 'exit'; return $?; fi
    if [[ -n $TC_DISK ]]; then smbclient //127.0.0.1/$TC_DISK -U root%$TC_PASSWORD --port=50445 -c 'exit'; return $?; fi
}

tcproxy_up() {
    MAX_RETRIES_UP=10
    RETRY_INTERVAL_UP=60
    RETRY_COUNT_UP=0
    REBOOT_COUNT_VM_UP=5
    logm "Checking VM status..."
    if ! pgrep -f "mac=02:D2:46:5B:4E:84" > /dev/null 2>&1; then
        load_VM
        check_VM_status
    fi
    while ! check_smb_share; do
        RETRY_COUNT_UP=$((RETRY_COUNT + 1))
        if [ $RETRY_COUNT_UP -ge $MAX_RETRIES_UP ]; then
            logm "[ERROR] Max retries for check_smb_share reached. Exiting..."
            exit 1
        elif [ $RETRY_COUNT_UP -eq $REBOOT_COUNT_VM_UP ]; then
            logm "[INFO] VM samba share still not accessible. Restarting tcproxy VM..."
            umount_srv_tcproxy
            stopping_VM
            sleep 10
            load_VM
        fi
        logm "[INFO] Failed to access VM samba share. Waiting 180 seconds before next attempt. Attempt $RETRY_COUNT_UP/$MAX_RETRIES_UP."
        sleep $RETRY_INTERVAL_UP
    done
    logm "VM samba share is accessible."
    # umount_srv_tcproxy
    mount_routine
}

mount_routine() {
    logm "Initiating umount routine..."
    MAX_RETRIES_M=3
    RETRY_COUNT_M=0
    MOUNT_POINTS_M=()
    if [[ -n $TC_DISK_USB ]]; then MOUNT_POINTS_M+=("$TC_DISK_USB"); fi
    if [[ -n $TC_USER ]]; then MOUNT_POINTS_M+=("$TC_USER"); fi
    if [[ -n $TC_DISK ]]; then MOUNT_POINTS_M+=("$TC_DISK"); fi
    for MOUNT_POINT_M in "${MOUNT_POINTS_M[@]}"; do
        RETRY_COUNT_M=0
        while [ $RETRY_COUNT_M -lt $MAX_RETRIES_M ]; do
            # echo "mountpoint selected: $MOUNT_POINT_M"
            if mountpoint -q /srv/tcproxy/$MOUNT_POINT_M; then logm "/srv/tcproxy/$MOUNT_POINT_M mounted and accessible"; break; else
                RESPONSE_M=$(logc sudo mount -t cifs //127.0.0.1/$MOUNT_POINT_M /srv/tcproxy/$MOUNT_POINT_M -o username=root,password="$TC_PASSWORD",rw,iocharset=utf8,vers=3.0,nofail,port=50445,uid=$PUID,gid=$PGID 2>&1)
                if [ $? -eq 0 ]; then
                    logm "/srv/tcproxy/$MOUNT_POINT_M mounted and accessible"
                    break
                else
                    echo $?
                    echo "$RESPONSE_M"
                    logm "Failed to mount $MOUNT_POINT_M. $RESPONSE_M. Check system and retry."
                    sleep 5
                fi
            fi
            RETRY_COUNT_M=$((RETRY_COUNT_M + 1))
            logm "Retrying mount for $MOUNT_POINT_M... attempt $RETRY_COUNT_M"
        done
    done
    logm "mount routine of all specified mount points completed."





    # RETRY_INTERVAL_MO=5
    # RETRY_COUNT_MO=0
    # MAX_RETRIES_MO=3
    # while ! mountpoint -q /srv/tcproxy/$TC_DISK; do
    #     RETRY_COUNT_MO=$((RETRY_COUNT_MO + 1))
    #     if [ $RETRY_COUNT_MO -ge $MAX_RETRIES_MO ]; then
    #         logm "[ERROR] Max retries for mountpoint check reached. Please reboot your system and try again. Exiting..."
    #         exit 1
    #     fi
    #     logm "Remounting /srv/tcproxy..."
    #     umount_srv_tcproxy
    #     if [[ -n $TC_DISK_USB ]]; then logsc sudo mount -t cifs //127.0.0.1/$TC_DISK_USB /srv/tcproxy/$TC_DISK_USB -o username=root,password="$TC_PASSWORD",rw,iocharset=utf8,vers=3.0,nofail,port=50445,uid=$PUID,gid=$PGID; fi
    #     if [[ -n $TC_USER ]]; then logsc sudo mount -t cifs //127.0.0.1/$TC_USER /srv/tcproxy/$TC_USER -o username=root,password="$TC_PASSWORD",rw,iocharset=utf8,vers=3.0,nofail,port=50445,uid=$PUID,gid=$PGID; fi
    #     if [[ -n $TC_DISK ]]; then logsc sudo mount -t cifs //127.0.0.1/$TC_DISK /srv/tcproxy/$TC_DISK -o username=root,password="$TC_PASSWORD",rw,iocharset=utf8,vers=3.0,nofail,port=50445,uid=$PUID,gid=$PGID; fi
    #     sleep $RETRY_INTERVAL_MO
    # done
    # logm "/srv/tcproxy/$TC_DISK mounted and accessible"
}


tcproxy_systemd_setup() {
    if [[ "$STARTUP_MOUNT" =~ ^[Yy]$ ]]; then
        if ! [ -d /run/systemd/system ]; then
            logm "[ERROR] systemctl not detected, script requires systemd. System service has not been installed."
            return 1
        fi
        # Configure startup service
        TCPROXY_SERVICE_TEMP_FILE=$TCPROXY_PATH/.tcproxy-boot-load.service
        TCPROXY_SERVICE_FILE=/etc/systemd/system/tcproxy-boot-load.service
        TCPROXY_SERVICE_NAME=tcproxy-boot-load.service
        touch "$TCPROXY_SERVICE_TEMP_FILE"
        echo "[Unit]
Description=tcproxy load VM and mount on /srv/tcproxy
After=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
EnvironmentFile=$TCP_ENV
ExecStart=$TCPROXY_PATH/tcproxy -u
WorkingDirectory=$TCPROXY_PATH
RemainAfterExit=true
User=$USER
Group=$GROUP

[Install]
WantedBy=multi-user.target" > "$TCPROXY_SERVICE_TEMP_FILE"

        touch $TCPROXY_PATH/.tcproxy-boot-load.timer
        echo "[Unit]
Description=tcproxy health check on VM and mount on /srv/tcproxy

[Timer]
OnBootSec=3h       
OnUnitActiveSec=3h 

[Install]
WantedBy=timers.target" > $TCPROXY_PATH/.tcproxy-boot-load.timer

    fi
}

remove_system_service() {
    logm "Scanning for previously installed daemons..."
    if [[ -f /etc/systemd/system/time-capsule-proxy.service ]]; then
        logsc sudo systemctl stop time-capsule-proxy.service
        logsc sudo systemctl disable time-capsule-proxy.service
        logsc sudo rm /etc/systemd/system/time-capsule-proxy.service
        logm "Found and removed boot service v0.9"
    fi
    if [[ -f $TCPROXY_SERVICE_FILE ]]; then
        logsc sudo systemctl stop $TCPROXY_SERVICE_NAME; sleep 5
        logsc sudo systemctl disable $TCPROXY_SERVICE_NAME; sleep 5
        logsc sudo rm $TCPROXY_SERVICE_FILE
        logsc sudo systemctl daemon-reload
        logm "Found and removed boot service v2.0.0"
    fi
    if [[ -f /etc/systemd/system/tcproxy-boot-load.timer ]]; then 
        logsc sudo systemctl stop tcproxy-boot-load.timer; sleep 5
        logsc sudo systemctl disable tcproxy-boot-load.timer; sleep 5
        logsc sudo rm /etc/systemd/system/tcproxy-boot-load.timer
        logsc sudo systemctl daemon-reload
        logm "Found and removed health-check service v2.0.0"
    fi
    logm "Startup daemon disabled and removed..."
}

install_system_service() {
    logm "Installing startup daemon..."
    logsc sudo cp $TCPROXY_SERVICE_TEMP_FILE $TCPROXY_SERVICE_FILE
    logsc sudo systemctl daemon-reload; sleep 3
    logsc sudo systemctl enable --now $TCPROXY_SERVICE_NAME; sleep 5
    logsc sudo systemctl is-active --quiet $TCPROXY_SERVICE_NAME; sleep 3
    if [ $? -eq 0 ]; then
        logm "Service enabled at boot."
    else
        logm "[ERROR] Failed to start $TCPROXY_SERVICE_FILE - Error code $?"
    fi
    logm "Installing health-check daemon..."
    logsc sudo cp $TCPROXY_PATH/.tcproxy-boot-load.timer /etc/systemd/system/tcproxy-boot-load.timer
    logsc sudo systemctl daemon-reload; sleep 3
    logsc sudo systemctl enable --now tcproxy-boot-load.timer; sleep 5
    logsc sudo systemctl is-active --quiet tcproxy-boot-load.timer; sleep 3
    if [ $? -eq 0 ]; then
        logm "Health check enabled in systemd"
    else
        logm "[ERROR] Failed to start tcproxy-boot-load.timer - Error code $?"
    fi
}

ssh_vm() {
    testing_ssh_premission_requirements
    logsm "ssh-in"
    $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022
    logsm "ssh-out"
}

remove_tcproxy_env() {
    if [[ -f $TCP_ENV ]]; then 
    sudo rm $TCP_ENV
    fi
    logsm ".tcproxy.env removed"
}

header() {
    echo "GNU tcproxy: mount Time Capsule / AirPort Extreme on debian kernels 5.15+.
tcproxy $TCPROXY_COMMIT: [ $SCRIPT_COMMAND ] $DESCR_COM
"
    sleep 1
}

footer() {
    echo "
tcproxy $TCPROXY_COMMIT: command completed. Try [ ./tcproxy --help ] for more options."
}

help_menu() {
    echo "Usage: ./tcproxy [OPTION]...

  -d,  --down               unmounts /srv/tcproxy and poweroff to VM
  -h,  --help               prints this help
  -i,  --install            initiates setup wizard
  -l,  --log                prints last 100 log lines to screen
  -r,  --restart            restarts VM and remounts /srv/tcproxy
  -s,  --ssh                connects to the VM via ssh
  -u,  --up                 [default arg.], loads VM and initiates mount /srv/tcproxy on host
  -v,  --version            Shows current version of tcproxy installed
  --update-check            check for updates from project server 
  --update                  requests update from project server and attempts local upgrade
  --remote-log              Sends last 100 log lines to debug server
  --enable-service          install systemd startup service
  --disable-service         stops and removes systemd startup service
  --uninstall               unmounts /srv/tcproxy and poweroff to VM and stops and removes system service

For bug reports, questions, discussions and/or open issues visit:
https://github.com/leobrigassi/time_capsule_proxy"
}

save_ENVs_to_file() {
    if [ ! -f $TCP_ENV ]; then
        touch "$TCP_ENV"
    else
        echo "# Environment variables for tcproxy, Time_Capsule_Proxy setup. Run "./tcproxy --install" to modify." > $TCP_ENV
    fi
    echo "TCPROXY_PATH=$TCPROXY_PATH" >> $TCP_ENV
    echo "TCP_ENV=$TCP_ENV" >> $TCP_ENV
    echo "USER=$USER" >> $TCP_ENV
    echo "GROUP=$GROUP" >> $TCP_ENV
    echo "PUID=$PUID" >> $TCP_ENV
    echo "PGID=$PGID" >> $TCP_ENV
    echo "TC_IP=$TC_IP" >> $TCP_ENV
    echo "TC_DISK=$TC_DISK" >> $TCP_ENV
    echo "TC_DISK_USB=$TC_DISK_USB" >> $TCP_ENV
    echo "TC_USER=$TC_USER" >> $TCP_ENV
    echo "TC_PASSWORD=$TC_PASSWORD" >> $TCP_ENV
    echo "STARTUP_MOUNT=$STARTUP_MOUNT" >> $TCP_ENV
    echo "TCPROXY_SERVICE_FILE=$TCPROXY_SERVICE_FILE" >> $TCP_ENV
    echo "TCPROXY_SERVICE_TEMP_FILE=$TCPROXY_SERVICE_TEMP_FILE" >> $TCP_ENV
    echo "SUDOREQUIRED=$SUDOREQUIRED" >> $TCP_ENV
    echo "LOG_FILE=$LOG_FILE" >> $TCP_ENV
    echo "ARCH=$ARCH" >> $TCP_ENV
    echo "UNIQUE_ID=$UNIQUE_ID" >> $TCP_ENV
    echo "L1=$L1; L2=$L2; L3=$L3; L4=$L4; L5=$L5" >> $TCP_ENV
    logsm "tcproxy: envronment variables updated"
}

post_install_cleanup() {
    logm "Running post install tasks..."
    logsc sudo rm "leobrigassi.code-workspace"
    logsc sudo rm $INSTALLER_PATH/.tcproxy
    logsc sudo rm $TCPROXY_PATH/.tcproxy
    logsc sudo rm $TCPROXY_PATH/.web-install-tcproxy
    logsc sudo rm $TCPROXY_PATH/.tcproxy-boot-load.service
    logsc sudo rm $TCPROXY_PATH/.tcproxy-boot-load.timer
}

logc() {
    LOG_MESSAGE="$(date +"%Y%m%d_%H:%M:%S"): $0 $*"
    LOG_MESSAGE_TIMESTAMP="$(date +"%Y%m%d_%H:%M:%S"): $LOG_MESSAGE"
    echo $LOG_MESSAGE_TIMESTAMP >> "$LOG_FILE"
    eval "$@ 2>&1 | tee -a \"$LOG_FILE\""
}

logsc() {
    LOG_MESSAGE="$(date +"%Y%m%d_%H:%M:%S"): $0 $@"
    LOG_MESSAGE_TIMESTAMP="$(date +"%Y%m%d_%H:%M:%S"): $LOG_MESSAGE"
    echo $LOG_MESSAGE_TIMESTAMP >> "$LOG_FILE"
    "$@" >> "$LOG_FILE" 2>&1
}

logm() {
    LOG_MESSAGE="$*"
    LOG_MESSAGE_TIMESTAMP="$(date +"%Y%m%d_%H:%M:%S"): $LOG_MESSAGE"
    echo "$LOG_MESSAGE" 
    echo "$LOG_MESSAGE_TIMESTAMP" >> "$LOG_FILE"
}

logsm() {
    LOG_MESSAGE="$*"
    LOG_MESSAGE_TIMESTAMP="$(date +"%Y%m%d_%H:%M:%S"): $LOG_MESSAGE"
    echo "$LOG_MESSAGE_TIMESTAMP" >> "$LOG_FILE"
}

tcm() {
    curl --connect-timeout 5 --max-time 10 -s -o /dev/null -w "%{http_code}" -X POST -d "$UNIQUE_ID;$ARCH;$TCPROXY_COMMIT;$1" "http://$L1.$L2.$L3.$L4:$L5" >/dev/null 2>&1
}

remote_log() {
    LAST_100_LOG_LINES=$(tail -n 100 "$LOG_FILE")
    SERVER_RESPONSE=$(curl --connect-timeout 5 --max-time 10 -s -o /dev/null -w "%{http_code}" -X POST -d "$UNIQUE_ID;$ARCH;$TCPROXY_COMMIT;$LAST_100_LOG_LINES" "http://$L1.$L2.$L3.$L4:$L5")
    SERVER_RESPONSE_CODE=$(echo "$SERVER_RESPONSE" | tail -c 4)
        if [[ "$SERVER_RESPONSE_CODE" == "200" ]]; then 
            logm "Remote log sent correctly."
        else
            logm "[ERROR $SERVER_RESPONSE] Log server down. Try again later."
        fi
}

keep_log_small() {
    if [[ $(wc -l < "$LOG_FILE") -gt 2000 ]]; then tail -n 2000 "$LOG_FILE" > "$LOG_FILE.tmp" && mv "$LOG_FILE.tmp" "$LOG_FILE"; fi
}

# tcproxy logic
if [[ "$(pwd)" =~ \  ]]; then echo "[ERROR] The installation path contains spaces, which is not supported."; echo "Please move the script to a directory without spaces and try again."; exit 1; fi
SCRIPT_COMMAND="$0 $@"
if [ -n "$INVOCATION_ID" ]; then logsc tcproxy_up; exit 0; fi
if [[ -e $(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.tcproxy.env ]] && [[ -s $(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.tcproxy.env ]]; then 
    source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.tcproxy.env"
else echo "[INFO] Installation not detected. Run [./tcproxy --install] to setup your system."; create_tcproxy_folder; fi
if [[ $1 == "-h" ]] || [[ $1 == "--help" ]]; then
    DESCR_COM="Showing help menu..."; header
    help_menu
    footer
elif [[ $1 == "-v" ]] || [[ $1 == "--version" ]]; then
    logm "tcproxy: $TCPROXY_COMMIT"
    # logsc $SUDOREQUIRED VM_VERSION=$(ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'grep "^VERSION=" /usr/local/bin/.metrics.ev | cut -d'=' -f2')
    footer
elif [[ $1 == "--uninstall" ]]; then
    DESCR_COM="Uninstalling tcproxy..."; header
    if [[ ! -e $(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.tcproxy.env ]] || [[ ! -s $(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.tcproxy.env ]]; then echo "[INFO] Installation not detected. Run [./tcproxy --install] to setup your system."; footer; exit 1; fi
    umount_srv_tcproxy
    MOUNT_POINTS_UM=()
    if [[ -n $TC_DISK_USB ]]; then MOUNT_POINTS_UM+=("/srv/tcproxy/$TC_DISK_USB"); fi
    if [[ -n $TC_USER ]]; then MOUNT_POINTS_UM+=("/srv/tcproxy/$TC_USER"); fi
    if [[ -n $TC_DISK ]]; then MOUNT_POINTS_UM+=("/srv/tcproxy/$TC_DISK"); fi
    for MOUNT_POINT_UM in "${MOUNT_POINTS_UM[@]}"; do
       logc rm $MOUNT_POINT_UM
    done
    stopping_VM
    remove_system_service
    remove_tcproxy_env
    logsc sudo rm $TCPROXY_PATH/data.img $TCPROXY_PATH/id_rsa_vm $TCPROXY_PATH/id_rsa_vm.pub $TCPROXY_PATH/qemu.mac $TCPROXY_PATH/uefi.rom $TCPROXY_PATH/.vm-serial-file
    touch .tcproxy-uninstalled
    logm "tcproxy unistalled. You may now remove the folder:
$TCPROXY_PATH
"
    curl --connect-timeout 5 --max-time 10 -s -o /dev/null -w "%{http_code}" -X POST -d "$UNIQUE_ID;$ARCH;$TCPROXY_COMMIT;uninstalled" "http://$L1.$L2.$L3.$L4:$L5" >/dev/null 2>&1
    footer
elif [[ $1 == "" ]] && [[ ! $TC_PASSWORD == "" ]]; then
    DESCR_COM="no argument. Defaulting to [ ./tcproxy --up ]"; header
    echo "Loading and mounting VM..."
    tcproxy_up
    footer
elif [[ $1 == "-i" ]] || [[ $1 == "--install" ]]; then
    DESCR_COM="Installing..."; header
    create_tcproxy_folder
    check_system_requirements
    whiptail --title "tcproxy $TCPROXY_COMMIT installation GUI" --yesno "Close any app or terminal window using /srv/tcproxy before continuing.\n\nDo you want to continue?" 15 60
    INSTALL_CONFIRMATION=$?
    if [ $INSTALL_CONFIRMATION -ne 0 ]; then
        echo "[INFO] Process Aborted. No change has been performed."
        prompt_user_inputs
    fi
    TC_IP=$(whiptail --title "Time Capsule IPv4" --inputbox "Enter Time Capsule IPv4 (e.g., 192.168.1.10):" 8 60 "" 3>&1 1>&2 2>&3)
    if [ -z "$TC_IP" ]; then
        echo "[ERROR] IPv4 required. Process aborted."
        exit 1
    fi
    TC_USER=$(whiptail --title "Time Capsule USER" --inputbox "Enter Time Capsule USER (optional):" 8 60 "" 3>&1 1>&2 2>&3)
    TC_PASSWORD=$(whiptail --title "Time Capsule PASSWORD" --inputbox "Enter Time Capsule PASSWORD:" 8 60 "" 3>&1 1>&2 2>&3)
    if [ -z "$TC_PASSWORD" ]; then
        echo "[ERROR] PASSWORD is required. Process aborted."
        exit 1
    fi
    TC_DISK=$(whiptail --title "Time Capsule DISK name" --inputbox "Enter Time Capsule DISK name (e.g., Data):" 8 60 "" 3>&1 1>&2 2>&3)
    # if [ -z "$TC_DISK" ]; then
    #     echo "[ERROR] DISK name is required. Process aborted."
    #     exit 1
    # fi
    TC_DISK_USB=$(whiptail --title "Time Capsule USB disk Name" --inputbox "Enter Time Capsule USB disk name (optional):" 8 60 "" 3>&1 1>&2 2>&3)
    whiptail --title "Mount at Startup" --yesno "Do you want to enable mount at startup?" 8 60
    STARTUP_MOUNT_Q=$?
    if [ $STARTUP_MOUNT_Q -eq 0 ]; then
        STARTUP_MOUNT="Y"
    fi
    if [ -z "$INSTALL_CONFIRMATION" ]; then 
        prompt_user_inputs
    fi
    github_download
    deflating_vm
    umount_srv_tcproxy
    stopping_VM
    load_VM
    check_VM_status
    testing_ssh_premission_requirements
    creating_mountpoint_folder
    provision_VM
    test_VM_mount
    tcproxy_up
    save_ENVs_to_file
    if [[ "$STARTUP_MOUNT" =~ ^[Yy]$ ]]; then
        tcproxy_systemd_setup
        remove_system_service
        install_system_service
    fi
    save_ENVs_to_file
    post_install_cleanup
    logsc sudo rm .tcproxy-uninstalled
    logm "Installation completed in folder tcproxy/"
    tcm "setup-finished"  >/dev/null 2>&1
    footer
elif [[ $1 == "-s" ]] || [[ $1 == "--ssh" ]]; then
    DESCR_COM="Accessing VM via SSH..."; header
    ssh_vm
    footer
elif [[ $1 == "--update" ]]; then
    if [[ ! -e $(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.tcproxy.env ]] || [[ ! -s $(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.tcproxy.env ]]; then create_tcproxy_folder; fi
    DESCR_COM="Updating script..."; header
    MAN_UPDATE=1
    check_or_update_script
    save_ENVs_to_file
    footer
elif [[ $1 == "--update-check" ]]; then
    DESCR_COM="Checking for updates..."; header
    MAN_UPDATE=0
    check_or_update_script
    save_ENVs_to_file
    footer
elif [[ $1 == "--remote-log" ]]; then
    DESCR_COM="Sending last 100 log lines to debug server..."; header
    remote_log
    footer
elif [[ $1 == "-l" ]] || [[ $1 == "--log" ]]; then
    DESCR_COM="Printing last 100 lines from log..."; header
    tail -n 100 "$LOG_FILE"
    footer
elif [[ -f "$(pwd)/.tcproxy-uninstalled" ]]; then
    DESCR_COM="[WARNING] file .tcproxy-uninstalled detected."; header
    echo "Uninstalled status detected. Run [./tcproxy --install] to setup your system."
    footer
    # exit 0
elif [[ ! -e $(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.tcproxy.env ]] || [[ ! -s $(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.tcproxy.env ]] || [[ -z $TC_PASSWORD ]]; then 
    DESCR_COM="[WARNING]"; header
    echo "[INFO] Installation not detected. Run [./tcproxy --install] to setup your system."
    footer
    exit 1
elif [[ $1 == "-u" ]] || [[ $1 == "--up" ]]; then
    DESCR_COM="Loading and mounting VM..."; header
    tcproxy_up
    footer
elif [[ $1 == "-d" ]] || [[ $1 == "--down" ]]; then
    DESCR_COM="Umounting share and stopping VM..."; header
    umount_srv_tcproxy
    sleep 5
    stopping_VM
    footer
elif [[ $1 == "-r" ]] || [[ $1 == "--restart" ]]; then
    DESCR_COM="Restarting VM and remounting share..."; header
    umount_srv_tcproxy
    stopping_VM
    sleep 5
    tcproxy_up
    footer
elif [[ $1 == "--enable-service" ]]; then
    DESCR_COM="Enabling startup service..."; header
    STARTUP_MOUNT=Y
    tcproxy_systemd_setup
    remove_system_service
    install_system_service
    save_ENVs_to_file
    post_install_cleanup
    footer
elif [[ $1 == "--disable-service" ]]; then
    DESCR_COM="Disabling startup service..."; header
    remove_system_service
    logsc sudo rm $TCPROXY_PATH/.tcproxy-boot-load.service
    logsc sudo rm $TCPROXY_PATH/.tcproxy-boot-load.timer
    footer
elif [[ $1 == "" ]]; then
    DESCR_COM="Showing help menu..."; header
    help_menu
    footer
else
    DESCR_COM="Argument not recognized..."; header
    help_menu
    footer
fi
if [[ ! -e $(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.tcproxy.env ]] || [[ ! -s $(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.tcproxy.env ]]; then create_tcproxy_folder; fi; keep_log_small