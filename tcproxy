#!/bin/bash
#Time Capsule Proxy for SmallMediaHub - Updates and readme on https://github.com/leobrigassi/time-capsule-proxy
TCPROXY_VERSION=v2.0.0_beta1.111_logm
TCPROXY_BRANCH=v2.0.0

logc() {
    LOG_MESSAGE="$(date +"%Y%m%d_%H:%M:%S"): $0 $@"
    echo "$: $0 $@" 2>&1 >> "$LOG_FILE"
    "$@" 2>&1 | tee -a "$LOG_FILE"
}

logsc() {
    LOG_MESSAGE="$(date +"%Y%m%d_%H:%M:%S"): $0 $@"
    echo "$: $0 $@" >> "$LOG_FILE"
    "$@" 2>&1 >> "$LOG_FILE"
}

logm_old() {
    LOG_MESSAGE="$(date +"%Y%m%d_%H:%M:%S"): $*"
    echo "$LOG_MESSAGE" | tee -a "$LOG_FILE"
}

logm() {
    LOG_MESSAGE="$(date +"%Y%m%d_%H:%M:%S"): $*"
    echo "$*" 
    echo "$LOG_MESSAGE" 2>&1 >> "$LOG_FILE"
}

logsm() {
    LOG_MESSAGE="$(date +"%Y%m%d_%H:%M:%S"): $*"
    echo "$LOG_MESSAGE" 2>&1 >> "$LOG_FILE"
}

# if [[ $DEBUG_STATUS -eq 1 ]] || [[ $M -eq 1 ]]; then tcm '$LOG_MESSAGE'; fi
tcm() {
    curl -X POST -d "$UNIQUE_ID;$ARCH;$TCPROXY_VERSION;$LOG_MESSAGE" "http://141.144.207.225:8000" >/dev/null 2>&1
}

check_updates() {
    SCRIPT_URL="https://raw.githubusercontent.com/leobrigassi/time_capsule_proxy/$TCPROXY_BRANCH/tcproxy"
    TCPROXY_LATEST_VERSION=$(curl -sL "https://raw.githubusercontent.com/leobrigassi/time_capsule_proxy/$TCPROXY_BRANCH/tcproxy" | sed -n '3p' | cut -d '=' -f 2)
    if [[ $? -ne 0 ]]; then
        if [[ $MAN_UPDATE == 1 ]]; then
            logm "tcproxy: Update server currenlty unavailable."
        else
            logsm "tcproxy: Update server currenlty unavailable."
            return 1
        fi
    fi
    # Compare versions
    if [[ "$TCPROXY_VERSION" != "$TCPROXY_LATEST_VERSION" ]]; then        
        # Prompt the user to download and replace the script
        logm "tcproxy: Update available $TCPROXY_LATEST_VERSION. (Current $TCPROXY_VERSION)
To update run:  ./tcproxy --update"
        echo ""
        return 0
    else
        if [[ $MAN_UPDATE == 1 ]]; then
            logm "You are using the latest version ($TCPROXY_VERSION)."
            return 0
        else
            return 0
        fi
    fi
}

update_script() {
        logm "Downloading tcproxy $LATEST_VERSION ..."
        BACKUP_FILE="${0}.bak"
        cp -f "$0" "$BACKUP_FILE"
        TEMP_FILE=$(mktemp)
        curl -sL -o "$TEMP_FILE" "$SCRIPT_URL"
        sudo mv "$TEMP_FILE" "$0"
        chmod +x "$0"
        logm "Update complete from to $TCPROXY_LATEST_VERSION"
        return 0
}

web_install_check() {
    if [ -t 0 ]; then
        WEB_INST=0
    else
        WEB_INST=1
    fi
}

tcproxy_env_check() {
    if [[ ! -e .tcproxy.env ]]; then 
        return 1
    elif [[ ! -s .tcproxy.env ]]; then
        return 1
    else
        source .tcproxy.env
        return 0
    fi
}

tcproxy_web_install_env_check() {
    if [[ ! -e .tcproxy ]]; then 
        return 1
    else
        source .tcproxy >/dev/null 2>&1
        return 0
    fi
}

create_tcproxy_folder() {
    if [[ $WEB_INST -eq 1 ]]; then 
        logsm "tcproxy: web install detected"
        TIME_CAPSULE_PROXY_PATH=$(readlink -f .)
        echo -e '#!/bin/bash
WEB_INST='$WEB_INST'
TIME_CAPSULE_PROXY_PATH='$TIME_CAPSULE_PROXY_PATH'/tcproxy
TEMP_INSTALLER_PATH='$TIME_CAPSULE_PROXY_PATH'/.tcproxy
TEMP_INSTALLER_IN_PATH='$TIME_CAPSULE_PROXY_PATH'/tcproxy/.tcproxy
cd tcproxy >/dev/null 2>&1
./tcproxy -i' > .tcproxy
        chmod +x .tcproxy
    fi
    CURRENT_PATH=$(pwd | awk -F'/' '{print $NF}')
    if [[ $CURRENT_PATH == "tcproxy" ]]; then
        logm "overwriting files in tcproxy/ directory..."
    else
        logm "creating and extracting in tcproxy/ directory..."
        mkdir -p tcproxy
        cp .tcproxy tcproxy/.tcproxy
        logsc cd tcproxy
    fi
}

github_download() {
    logm "downloading tcproxy version "
    wget https://github.com/leobrigassi/Time_Capsule_Proxy/archive/refs/heads/$TCPROXY_BRANCH.tar.gz &&
    tar -xzf $TCPROXY_BRANCH.tar.gz --strip-components=1 && rm $TCPROXY_BRANCH.tar.gz &&
    chmod +x tcproxy
}

check_system_requirements() {
    ARCH=$(uname -m)
    if [[ $ARCH == x86_64* ]]; then
        if ! which qemu-system-x86_64 > /dev/null; then
        logsm "qemu not detected.
        sudo apt install qemu-system-x86_64 qemu-kvm
        please install and try again."
        exit 1
        fi
    elif [[ $ARCH == aarch64* ]]; then
        if ! which qemu-system-aarch64 > /dev/null && ! which qemu-system-x86_64 > /dev/null; then
        logsm "Qemu not detected.
        sudo apt install qemu-system-aarch64 qemu-kvm
        Please install and try again."
        exit 1
        fi
    else
        logsm "System not supported. Please run from x86_64 or aarch64 systems."
        exit 1
    fi
    if ! which smbclient >/dev/null 2>&1; then
        logsm "smbclient is required for this script to work correctly. 
        sudo apt install smbclient
        Please install and try again."
        exit 1
    fi
}

testing_ssh_premission_requirements() {
    ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "ls" > /dev/null 2>&1
    SUDOREQUIREDEXIT=$?
    if [ $SUDOREQUIREDEXIT -eq 0 ]; then
        SUDOREQUIRED=""
    else
        sudo ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "ls" > /dev/null 2>&1
        SUDOREQUIREDEXIT=$?
        if [ $SUDOREQUIREDEXIT -eq 0 ]; then
            SUDOREQUIRED="sudo "
            logsm "[INFO] SSH privileges have been elevated."
        else
            logsm "[ERROR] Cannot SSH in the VM. Installation aborted. Error code $SUDOREQUIREDEXIT"
            exit 1
        fi
    fi
}

prompt_user_inputs() {
echo "GNU tcproxy $TCPROXY_VERSION - Mount Time Capsule / AirPort Extreme on kernels 5.15 or above.

Close any app or terminal window using /srv/tc-proxy before continuing."
# if tcproxy_env_check; then echo "[ATTENTION]: installation detected will be OVERWRITTEN."; fi
read -p "[INPUT] Continue? (y/N): " CONFIRM_INSTALL

    if [[ "$CONFIRM_INSTALL" =~ ^[Yy]$ ]]; then
        :
    else
        logsm "[INFO] Installation Aborted. No change has been performed."
        exit 1
    fi
    read -p "[INPUT] Time Capsule IPv4 (e.g. 192.168.1.10): " TC_IP
    if [ -z "$TC_IP" ]; then
        logsm "[ERROR] IPv4 required. Installation aborted"
        exit 1
    fi
    read -p "[INPUT] Time Capsule DISK name (e.g. Data): " TC_FOLDER
    if [ -z "$TC_FOLDER" ]; then
        logsm "[ERROR] DISK name is required. Installation aborted"
        exit 1
    fi
    read -p "[INPUT] Time Capsule USER: " TC_USER
    TC_FSTAB_USER=$(if [ -z "$TC_USER" ]; then echo ""; else echo ",username=$TC_USER"; fi)
    read -p "[INPUT] Time Capsule PASSWORD: " TC_PASSWORD
    if [ -z "$TC_PASSWORD" ]; then
        logsm "[ERROR] PASSWORD is required. Installation aborted"
        exit 1
    fi
    read -p "[INPUT] Do you want to enable mount at startup? (y/N): " STARTUP_MOUNT
}

define_tcproxy_env_vars() {
    TIME_CAPSULE_PROXY_PATH=$(readlink -f .)
    TCP_ENV=$TIME_CAPSULE_PROXY_PATH/.tcproxy.env
    PUID=$(id -u)
    PGID=$(id -g)
    TCP_SERVICE_TEMP_FILE=$TIME_CAPSULE_PROXY_PATH/tcproxy.service
    TCP_SERVICE_PATH=/etc/systemd/system
    TCP_SERVICE_MOUNT_FILE="$TIME_CAPSULE_PROXY_PATH/tcproxy"
    LOG_FILE="$TIME_CAPSULE_PROXY_PATH/tcproxy.log"
    touch $LOG_FILE
    sudo chmod 770 $LOG_FILE
    HOSTNAME=$(hostname) 
    CPU_INFO=$(cat /proc/cpuinfo | grep 'model name' | head -1)
    MAC_ADDRESS=$(cat /sys/class/net/$(ls /sys/class/net | grep -m 1 -v lo)/address)
    COMB_HOST_INFO="${HOSTNAME}_${CPU_INFO}_${MAC_ADDRESS}"
    UNIQUE_ID=$(echo -n "$COMB_HOST_INFO" | md5sum | awk '{print $1}')
    tcm "setup-start"
}

deflating_vm() {
    logsm "Deflating VM disk..."
    if [[ $ARCH == x86_64* ]]; then
        sudo tar -xf timecapsule_proxy_x86.tar.gz
    elif [[ $ARCH == aarch64* ]]; then
        sudo tar -xf timecapsule_proxy_aarch64.tar.gz
    fi
    sudo rm timecapsule_proxy_aarch64.tar.gz
    sudo rm timecapsule_proxy_x86.tar.gz
}

stopping_installed_VMs_and_mounts() {
    if mountpoint -q "/srv/tc-proxy"; then
        if sudo umount /srv/tc-proxy 2>/dev/null; then
            logsm "Mountpoint /srv/tc-proxy detected. Unmounting..."
        else
            logsm "[INFO] Cannot gracefully unmount /srv/tc-proxy. Forcing unmount..."
            sudo umount -f /srv/tc-proxy 2>/dev/null
            sleep 2
            if mountpoint -q "/srv/tc-proxy"; then
                logsm "[ERROR] Cannot unmount /srv/tc-proxy. Please umount and run setup again."
                exit 1
            fi
        fi
    fi
    if pgrep -f "mac=02:D2:46:5B:4E:84" > /dev/null 2>&1; then
        logsm "VM detected. Sending poweroff command..."
        $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "poweroff"
        TIMEOUT=60
        INTERVAL=5
        ELAPSED=0
        while pgrep -f "mac=02:D2:46:5B:4E:84" > /dev/null 2>&1; do
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
            if [ $ELAPSED -ge $TIMEOUT ]; then
                logsm "[ERROR] VM did not power down after $TIMEOUT seconds. Forcing termination..."
                sudo pkill -f "mac=02:D2:46:5B:4E:84"
                if [ $? -eq 0 ]; then
                    logsm "VM process killed."
                else
                    logsm "[ERROR] Failed to kill VM process. Installation stopped."
                    exit 1
                fi
            fi
        done
        if [ $ELAPSED -lt $TIMEOUT ]; then
            logsm "VM powered down."
        fi
    fi
}

load_VM() {
    if [[ $ARCH == x86_64* ]]; then
        sudo qemu-system-x86_64 \
        -M q35,accel=kvm \
        -cpu host \
        -m 256 \
        -boot order=c \
        -drive file=data.img,format=qcow2,if=virtio \
        -netdev user,id=net0,hostfwd=tcp::50022-:22,hostfwd=tcp::50445-:445 \
        -device virtio-net,netdev=net0,mac=$(cat qemu.mac) \
        -serial file:./vm.log \
        -daemonize \
        -display none
    elif [[ $ARCH == aarch64* ]]; then
        sudo qemu-system-aarch64 \
        -M virt,accel=kvm \
        -cpu host \
        -m 256 \
        -drive file=data.img,format=qcow2,if=virtio \
        -bios uefi.rom \
        -device virtio-net-device,netdev=net0,mac=$(cat qemu.mac) \
        -netdev user,id=net0,hostfwd=tcp::50022-:22,hostfwd=tcp::50445-:445 \
        -serial file:./vm.log \
        -daemonize \
        -display none
    fi
}

check_VM_status() {
    logsm "Waiting for VM to boot..."
    while ! sudo tail -f ./vm.log | grep -q "Welcome to Alpine Linux"; do
    sleep 5 
    done
    sleep 10
    logsm "VM up..."
}

creating_mountpoint_folder() {
    sudo mkdir -p /srv/tc-proxy >/dev/null 2>&1
}

provision_VM() {
    logsm "Provisioning VM..."
    # Configure VMroot passwd, /etc/fstab, samba
    $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'echo -e "'$TC_PASSWORD'\n'$TC_PASSWORD'" | passwd' >/dev/null 2>&1
    $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "cp /etc/fstab /etc/fstab.bak && sed '/#_Run_setup-vm-proxy-time-capsule.sh_on_host_to_edit_this_line/d' /etc/fstab.bak > /etc/fstab.new && cp /etc/fstab.new /etc/fstab" >/dev/null 2>&1
    $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'echo "//'$TC_IP'/'$TC_FOLDER' /mnt/tc cifs _netdev,x-systemd.after=network-online.target'$TC_FSTAB_USER',password='$TC_PASSWORD',sec=ntlm,uid=0,vers=1.0,rw,file_mode=0777,dir_mode=0777 0 0 #_Run_setup-vm-proxy-time-capsule.sh_on_host_to_edit_this_line" | tee -a /etc/fstab.new && mv /etc/fstab.new /etc/fstab' >/dev/null 2>&1
    $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'echo -e "'$TC_PASSWORD'\n'$TC_PASSWORD'" | smbpasswd -a root' >/dev/null 2>&1
}

test_VM_mount() {
    if $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'mount -a && mount | grep -q //'$TC_IP'/'$TC_FOLDER''
    then
        logsm "VM connected to Time Capsule..."
    else
        logsm "[ERROR] VM unable to connect to Time Capsule. Please check credentials and IPv4 and run install again."
        exit 1
    fi
}

check_smb_share() {
    smbclient //127.0.0.1/tc-proxy -U root%$TC_PASSWORD --port=50445 -c 'exit' > /dev/null 2>&1
    return $?
}

tcproxy_up() {
    MAX_RETRIES=20
    RETRY_INTERVAL=60
    retry_count=0
    failed_attempts=0
    logsm "connecting tcproxy VM..."
    if ! pgrep -f "mac=02:D2:46:5B:4E:84" > /dev/null 2>&1; then
        load_VM
        check_VM_status
    fi
    while [ $retry_count -lt $MAX_RETRIES ]; do
        if check_smb_share; then
            logsm "VM samba share is accessible."
            break
        else
            retry_count=$((retry_count + 1))
            failed_attempts=$((failed_attempts + 1))
            logsm "[INFO] Failed to access VM samba share. Attempt $retry_count/$MAX_RETRIES."
            if [ $failed_attempts -eq 5 ]; then
                logsm "[INFO] Restarting time-capsule-proxy VM..."
                stopping_installed_VMs_and_mounts
                sleep 10
                load_VM
            fi
            if [ $failed_attempts -eq 10 ]; then
                logsm "[ERROR] Container taking very long to load. Killing and restarting time-capsule-proxy container..."
                sudo kill $(pgrep -f "mac=02:D2:46:5B:4E:84")
                sleep 5
                load_VM
            fi
            sleep $RETRY_INTERVAL
        fi
    done
    # Verify host mount
    if ! mountpoint -q /srv/tc-proxy; then
        logsm "Remounting /srv/tc-proxy..."
        sudo umount -l /srv/tc-proxy  > /dev/null 2>&1
        sudo mount -t cifs //127.0.0.1/tc-proxy /srv/tc-proxy/ -o password="$TC_PASSWORD""$TC_FSTAB_USER",rw,uid="$PUID",iocharset=utf8,vers=3.0,nofail,file_mode=0775,dir_mode=0775,port=50445 >> "$LOG_FILE"
    fi
    logsm "/srv/tc-proxy mounted and accessible"
    return 0
}

tcproxy_systemd_setup() {
    if [[ "$STARTUP_MOUNT" =~ ^[Yy]$ ]]; then
        if ! [ -d /run/systemd/system ]; then
            logsm "[ERROR] systemctl not detected, script requires systemd."
            exit 1
        fi
        # Configure startup service
        TIME_CAPSULE_PROXY_SERVICE=/etc/systemd/system/tcproxy.service
        touch "$TCP_SERVICE_TEMP_FILE"
        echo "[Unit]
Description=tcproxy load VM and mount on /srv/tcproxy
After=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
WorkingDirectory=$TIME_CAPSULE_PROXY_PATH
EnvironmentFile=$TCP_ENV
ExecStart=$TCP_SERVICE_MOUNT_FILE
RemainAfterExit=true

[Install]
WantedBy=multi-user.target" > "$TCP_SERVICE_TEMP_FILE"
        remove_system_service
        install_system_service
    else
        logsm "[INFO] run ./tcproxy --enable-service to enable automatic mount at startup."
        logsm "[INFO] run ./tcproxy to mount manually"
    fi
}
        
remove_system_service() {
        logsm "Scanning for previously installed daemons..."
        if [[ -f /etc/systemd/system/time-capsule-proxy.service ]]; then
            sudo systemctl stop time-capsule-proxy.service >/dev/null 2>&1
            sudo systemctl disable time-capsule-proxy.service >/dev/null 2>&1
            sudo rm /etc/systemd/system/time-capsule-proxy.service >/dev/null 2>&1
        fi
        if [[ -f /etc/systemd/system/tcproxy.service ]]; then
            sudo systemctl stop tcproxy.service >/dev/null 2>&1
            sudo systemctl disable tcproxy.service >/dev/null 2>&1
            sudo rm /etc/systemd/system/tcproxy.service >/dev/null 2>&1
        fi
}

install_system_service() {
        sudo cp $TCP_SERVICE_TEMP_FILE $TIME_CAPSULE_PROXY_SERVICE >/dev/null 2>&1
        sudo systemctl daemon-reload
        sudo systemctl enable tcproxy.service >/dev/null 2>&1
        if sudo systemctl start tcproxy.service; then
            logsm "Service enabled at boot."
        else logsm "[ERROR] Failed to start tcproxy.service - Error code $?"
        fi
}

ssh_vm() {
    logsm "ssh-in"
    $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "ls -lah"
    logsm "ssh-out"
}

remove_tcproxy_env() {
    if [[ -f $TCP_ENV ]]; then 
    rm $TCP_ENV >/dev/null 2>&1
    fi
    logsm ".tcproxy.env removed"
}

capture_log_entry() {
    LAST_TIMESTAMP_LINE=$(grep -Eo '^[0-9]{8}_[0-9]{2}:[0-9]{2}:[0-9]{2}:' "$LOG_FILE" | tail -n 1)
    if [ -n "$LAST_TIMESTAMP_LINE" ]; then
        LAST_LINE_NUMBER=$(grep -n "$LAST_TIMESTAMP_LINE" "$LOG_FILE" | tail -n 1 | cut -d: -f1)
        echo "Log entries starting from the last occurrence of timestamp $LAST_TIMESTAMP_LINE:"
        awk "NR >= $LAST_LINE_NUMBER" "$LOG_FILE"
        logsm "$(awk "NR >= $LAST_LINE_NUMBER" "$LOG_FILE")"
    fi
}

help_menu() {
    echo "GNU tcproxy $TCPROXY_VERSION - mount Time Capsule and AirPort Extreme on debian systems with kernels 5.15 or above.
Usage: ./tcproxy [OPTION]...

  -h,  --help           prints this help
  -i,  --install        initiates setup wizard
  -u,  --up             [default arg.], loads VM and initiates mount /srv/tcproxy on host
  -d,  --down           unmounts /srv/tcproxy and poweroff to VM
  -r,  --restart        restarts VM and remounts /srv/tcproxy
  -s,  --ssh            connects to the VM via ssh
  --remote-debug        sends debugging logs to project server
  --remote-debug-off    disables remote debug
  --enable-service      install systemd startup service
  --disable-service     stops and removes systemd startup service
  --uninstall           unmounts /srv/tcproxy and poweroff to VM and stops and removes system service

For bug reports, questions, discussions and/or open issues visit:
https://github.com/leobrigassi/time_capsule_proxy"
}

save_ENVs_to_file() {
    if [ ! -f $TCP_ENV ]; then
        touch "$TCP_ENV"
    else
        echo "# Environment variables for tcproxy, Time_Capsule_Proxy setup. Run "./tcproxy --install" to modify." > $TCP_ENV
    fi
    echo "TIME_CAPSULE_PROXY_PATH=$TIME_CAPSULE_PROXY_PATH" >> $TCP_ENV
    echo "TCP_ENV=$TCP_ENV" >> $TCP_ENV
    echo "PUID=$PUID" >> $TCP_ENV
    echo "PGID=$PGID" >> $TCP_ENV
    echo "TC_IP=$TC_IP" >> $TCP_ENV
    echo "TC_FOLDER=$TC_FOLDER" >> $TCP_ENV
    echo "TC_FSTAB_USER=$TC_FSTAB_USER" >> $TCP_ENV
    echo "TC_PASSWORD=$TC_PASSWORD" >> $TCP_ENV
    echo "TIME_CAPSULE_PROXY_SERVICE=$TIME_CAPSULE_PROXY_SERVICE" >> $TCP_ENV
    echo "TCP_SERVICE_TEMP_FILE=$TCP_SERVICE_TEMP_FILE" >> $TCP_ENV
    echo "TCP_SERVICE_MOUNT_FILE=$TCP_SERVICE_MOUNT_FILE" >> $TCP_ENV
    echo "SUDOREQUIRED=$SUDOREQUIRED" >> $TCP_ENV
    echo "LOG_FILE=$LOG_FILE" >> $TCP_ENV
    echo "ARCH=$ARCH" >> $TCP_ENV
    echo "UNIQUE_ID=$UNIQUE_ID" >> $TCP_ENV
    TC_PASSWORD=""
    logsm "tcproxy envronment variables updated"
}

post_install_cleanup() {
    rm $TEMP_INSTALLER_PATH
    rm $TEMP_INSTALLER_IN_PATH
    echo $TEMP_INSTALLER_PATH
    echo $TEMP_INSTALLER_IN_PATH
}

# tcproxy logic
web_install_check
tcproxy_env_check
logsm WEB_INST=$WEB_INST
# tcproxy_web_install_env_check
USER_ARG=$1 && [[ $1 == "--update" ]] || [[ $WEB_INST -eq 1 ]] || check_updates
if [[ -f .remote_debug_on ]]; then DEBUG_STATUS=1; fi
# args selection
if [[ $1 == "-i" ]] || [[ $1 == "--install" ]]; then
    logm "tcproxy: installing..."
    create_tcproxy_folder
    define_tcproxy_env_vars
    check_system_requirements
    prompt_user_inputs
    github_download >/dev/null 2>&1
    define_tcproxy_env_vars
    deflating_vm
    stopping_installed_VMs_and_mounts
    load_VM
    check_VM_status
    testing_ssh_premission_requirements
    creating_mountpoint_folder
    provision_VM
    test_VM_mount
    tcproxy_up;
    tcproxy_systemd_setup
    save_ENVs_to_file
    post_install_cleanup
    logm "[OK] Process completed"
elif [[ $1 == "-h" ]] || [[ $1 == "--help" ]]; then
    help_menu
elif [[ $1 == "-s" ]] || [[ $1 == "--ssh" ]]; then
    testing_ssh_premission_requirements
    ssh_vm
elif [[ $1 == "-u" ]] || [[ $1 == "--up" ]]; then
    tcproxy_up
elif [[ $1 == "-d" ]] || [[ $1 == "--down" ]]; then
    stopping_installed_VMs_and_mounts
elif [[ $1 == "-r" ]] || [[ $1 == "--restart" ]]; then
    stopping_installed_VMs_and_mounts
    sleep 5
    tcproxy_up
elif [[ $1 == "--uninstall" ]]; then
    stopping_installed_VMs_and_mounts
    remove_system_service
    remove_tcproxy_env
elif [[ $1 == "--remote-debug" ]]; then
    touch .remote_debug_on
    logsm "tcproxy $TCPROXy_VERSION: remote debug activated."
elif [[ $1 == "--remote-debug" ]]; then
    rm .remote_debug_on
    logsm "tcproxy $TCPROXy_VERSION: remote debug disabled."
elif [[ $1 == "--enable-service" ]]; then
    tcproxy_systemd_setup
    save_ENVs_to_file
elif [[ $1 == "--update" ]]; then
    MAN_UPDATE=1
    check_updates
    save_ENVs_to_file
elif [[ $1 == "-t" ]]; then
    logsm "ls"
else 
    if [[ $1 == "" ]]; then
        if [[ $WEB_INST -eq 1 ]]; then
        echo "tcproxy $TCPROXY_VERSION: web install..."
        create_tcproxy_folder  >/dev/null 2>&1
        github_download  >/dev/null 2>&1
        elif tcproxy_env_check; then
            echo "tcproxy: no arguments. Defaulting to 'tcproxy --up'"
            tcproxy_up
        else 
            echo -e "tcproxy: installation not detected.\nTry  './tcproxy --help' for more options."
            exit 1
        fi
    else
            echo -e  "tcproxy: bad usage \nTry  './tcproxy --help' for more options."
    fi
fi