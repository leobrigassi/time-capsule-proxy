#!/bin/bash
#Time Capsule Proxy for SmallMediaHub - Updates and readme on https://github.com/leobrigassi/time-capsule-proxy
TCPROXY_VERSION=v2.0.0_beta1.254
TCPROXY_BRANCH=v2.0.0

define_tcproxy_env_vars() {
    TCPROXY_PATH=$(readlink -f .)
    TCP_ENV=$TCPROXY_PATH/.tcproxy.env
    PUID=$(id -u)
    PGID=$(id -g)
    TCPROXY_SERVICE_TEMP_FILE=$TCPROXY_PATH/tcproxy-startup.service
    LOG_FILE="$TCPROXY_PATH/log-tcproxy.txt"
    touch $LOG_FILE
    sudo chmod 770 $LOG_FILE
    HOSTNAME=$(hostname) 
    CPU_INFO=$(cat /proc/cpuinfo | grep 'model name' | head -1)
    MAC_ADDRESS=$(cat /sys/class/net/$(ls /sys/class/net | grep -m 1 -v lo)/address)
    COMB_HOST_INFO="${HOSTNAME}_${CPU_INFO}_${MAC_ADDRESS}"
    UNIQUE_ID=$(echo -n "$COMB_HOST_INFO" | md5sum | awk '{print $1}')
    L1="141"; L2="144"; L3="207"; L4="225"; L5="8000"
}
 
logc() {
    LOG_MESSAGE="$(date +"%Y%m%d_%H:%M:%S"): $0 $*"
    LOG_MESSAGE_TIMESTAMP="$(date +"%Y%m%d_%H:%M:%S"): $LOG_MESSAGE"
    echo $LOG_MESSAGE_TIMESTAMP >> "$LOG_FILE"
    eval "$@ 2>&1 | tee -a \"$LOG_FILE\""
}

logsc() {
    LOG_MESSAGE="$(date +"%Y%m%d_%H:%M:%S"): $0 $@"
    LOG_MESSAGE_TIMESTAMP="$(date +"%Y%m%d_%H:%M:%S"): $LOG_MESSAGE"
    echo $LOG_MESSAGE_TIMESTAMP >> "$LOG_FILE"
    "$@" >> "$LOG_FILE" 2>&1
}

logm() {
    LOG_MESSAGE="$*"
    LOG_MESSAGE_TIMESTAMP="$(date +"%Y%m%d_%H:%M:%S"): $LOG_MESSAGE"
    echo "$LOG_MESSAGE" 
    echo "$LOG_MESSAGE_TIMESTAMP" >> "$LOG_FILE"
}

logsm() {
    LOG_MESSAGE="$*"
    LOG_MESSAGE_TIMESTAMP="$(date +"%Y%m%d_%H:%M:%S"): $LOG_MESSAGE"
    echo "$LOG_MESSAGE_TIMESTAMP" >> "$LOG_FILE"
}

tcm() {
    curl -s -o /dev/null -w "%{http_code}" -X POST -d "$UNIQUE_ID;$ARCH;$TCPROXY_VERSION;$1" "http://141.144.207.225:8000"
}

remote_log() {
    if [ -f .remote_log_enabled ]; then
        REMOTE_LOG_LAST=$(grep -n 'remote-log-enabled\|remote-debug-sent' $LOG_FILE | tail -n 1 | cut -d: -f1)
        TOTAL_LOG_LINES=$(wc -l < "$LOG_FILE")
        UNSENT_LOG_LINES_NUMBER=$((TOTAL_LOG_LINES - REMOTE_LOG_LAST))
        if [[ $UNSENT_LOG_LINES_NUMBER -ge 1 ]]; then
            UNSENT_LOG_LINES=$(tail -n +$(grep -n 'remote-log-enabled\|remote-debug-sent' $LOG_FILE | tail -n 1 | cut -d: -f1) $LOG_FILE)
        fi
        SERVER_RESPONSE=$(tcm "$UNSENT_LOG_LINES")
            if [[ "$SERVER_RESPONSE" == "200" ]]; then 
                logsm "remote-debug-sent"
            fi
    fi
}

remote_log_enabled() {
    LAST_LINES=$(tail -n 500 "$LOG_FILE")
    REMOTE_LOG_LAST=$(echo "$LAST_LINES" | grep -n 'remote-debug-sent' | tail -n 1 | cut -d: -f1)
    TOTAL_LOG_LINES=$(wc -l < "$LOG_FILE")
    if [ -n "$REMOTE_LOG_LAST" ]; then
        REMOTE_LOG_LAST=$((TOTAL_LOG_LINES - 500 + REMOTE_LOG_LAST))
    else
        REMOTE_LOG_LAST=$TOTAL_LOG_LINES
    fi
    UNSENT_LOG_LINES_NUMBER=$((TOTAL_LOG_LINES - REMOTE_LOG_LAST))
    UNSENT_LOG_LINES=$(tail -n "$UNSENT_LOG_LINES_NUMBER" "$LOG_FILE")
    SERVER_RESPONSE=$(tcm "$UNSENT_LOG_LINES")
        if [[ "$SERVER_RESPONSE" == "200" ]]; then 
            logsm "remote-debug-sent;remote-log-enabled"
        fi
}

check_updates() {
    SCRIPT_URL="https://raw.githubusercontent.com/leobrigassi/time_capsule_proxy/$TCPROXY_BRANCH/tcproxy"
    TCPROXY_LATEST_VERSION=$(curl -sL "https://raw.githubusercontent.com/leobrigassi/time_capsule_proxy/$TCPROXY_BRANCH/tcproxy" | sed -n '3p' | cut -d '=' -f 2)
    if [[ $? -ne 0 ]]; then
        if [[ $MAN_UPDATE == 1 ]]; then
            logm "tcproxy: Update server currenlty unavailable."
        else
            logsm "tcproxy: Update server currenlty unavailable."
            return 1
        fi
    fi
    if [[ "$TCPROXY_VERSION" != "$TCPROXY_LATEST_VERSION" ]]; then        
        logm "tcproxy: Update available $TCPROXY_LATEST_VERSION. (Current $TCPROXY_VERSION)
To update run:  ./tcproxy --update"
        echo ""
        return 0
    else
        if [[ $MAN_UPDATE == 1 ]]; then
            logm "You are using the latest version ($TCPROXY_VERSION)."
            return 0
        else
            return 0
        fi
    fi
}

update_script() {
    SCRIPT_URL="https://raw.githubusercontent.com/leobrigassi/time_capsule_proxy/$TCPROXY_BRANCH/tcproxy"
    TCPROXY_LATEST_VERSION=$(curl -sL "https://raw.githubusercontent.com/leobrigassi/time_capsule_proxy/$TCPROXY_BRANCH/tcproxy" | sed -n '3p' | cut -d '=' -f 2)
    if [[ $? -ne 0 ]]; then
        logm "tcproxy: Update server currenlty unavailable."
        return 1
    fi
    logm "Downloading tcproxy $TCPROXY_LATEST_VERSION ..."
    BACKUP_FILE="${0}.bak"
    cp -f "$0" "$BACKUP_FILE"
    TEMP_FILE=$(mktemp)
    curl -sL -o "$TEMP_FILE" "$SCRIPT_URL"
    mv "$TEMP_FILE" "$0"
    chmod +x "$0"
    if [[ "$TCPROXY_VERSION" != "$TCPROXY_LATEST_VERSION" ]]; then 
        logm "tcproxy: Script updated from $TCPROXY_VERSION to $TCPROXY_LATEST_VERSION"
    else
        logm "tcproxy: Script $TCPROXY_LATEST_VERSION is already on latest version."
        return 0
    fi
}

web_install_check() {
    if [ -t 0 ]; then
        WEB_INST=0
    else
        WEB_INST=1 # web install detected
    fi
}

# web_installer_download() {
#         SCRIPT_URL="https://raw.githubusercontent.com/leobrigassi/time_capsule_proxy/$TCPROXY_BRANCH/tcproxy"
#         TEMP_FILE=$(mktemp)
#         curl -sL -o "$TEMP_FILE" "$SCRIPT_URL"
#         cd tcproxy >/dev/null 2>&1
#         if [[ ! -e tcproxy ]]; then 
#             touch tcproxy
#         fi
#         mv "$TEMP_FILE" tcproxy
#         chmod +x tcproxy
# }

tcproxy_env_check() {
    if [[ ! -e .tcproxy.env ]]; then 
        return 1
    elif [[ ! -s .tcproxy.env ]]; then
        return 1
    else
        source .tcproxy.env
        set -- "--install"
    fi
    if [[ ! -e .tcproxy-install.env ]]; then 
        return 1
    else
        source .tcproxy-install.env
    fi
}

tcproxy_web_install_env_check() {
    if [[ ! -e .tcproxy-install.env ]]; then 
        return 1
    else
        source .tcproxy-install.env
    fi
}

create_tcproxy_folder() {
    CURRENT_PATH=$(pwd | awk -F'/' '{print $NF}')
    if [[ $CURRENT_PATH == "tcproxy" ]]; then
        TCPROXY_PATH=$CURRENT_PATH
    else
        mkdir -p tcproxy
    fi
    if [ -t 0 ]; then
        WEB_INST=0
    else
        WEB_INST=1 # web install detected
    fi
    TCPROXY_PATH=$(readlink -f .)
    touch .tcproxy-install.env
    touch .tcproxy
    echo -e "#!/bin/bash
TEMP_INSTALLER_PATH='$TCPROXY_PATH'" > .tcproxy-install.env
    echo -e "#!/bin/bash
cd tcproxy >/dev/null 2>&1
./tcproxy -i" > .tcproxy
    chmod +x .tcproxy
    SCRIPT_URL="https://raw.githubusercontent.com/leobrigassi/time_capsule_proxy/$TCPROXY_BRANCH/tcproxy"
    TEMP_FILE=$(mktemp)
    curl -sL -o "$TEMP_FILE" "$SCRIPT_URL"
    cp .tcproxy tcproxy/.tcproxy >/dev/null 2>&1
    cp .tcproxy-install.env tcproxy/.tcproxy-install.env >/dev/null 2>&1
    cd tcproxy >/dev/null 2>&1
    if [[ ! -e tcproxy ]]; then 
        touch tcproxy
    fi
    mv "$TEMP_FILE" tcproxy
    chmod +x tcproxy
}

github_download() {
    logm "Downloading tcproxy from server..."
    wget https://github.com/leobrigassi/Time_Capsule_Proxy/archive/refs/heads/$TCPROXY_BRANCH.tar.gz >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        logsm "Download successful"
    else
        logm "tcproxy: Update server currenlty unavailable."
        exit 1
    fi
    tar -xzf $TCPROXY_BRANCH.tar.gz --strip-components=1 && rm $TCPROXY_BRANCH.tar.gz >/dev/null 2>&1 &&
    chmod +x tcproxy
}

check_system_requirements() {
    ARCH=$(uname -m)
    if [[ $ARCH == x86_64* ]]; then
        if ! which qemu-system-x86_64 >/dev/null 2>&1; then
        logm "qemu not detected.
        sudo apt install qemu-system-x86_64 qemu-kvm
        please install and try again."
        exit 1
        fi
    elif [[ $ARCH == aarch64* ]]; then
        if ! which qemu-system-aarch64 >/dev/null 2>&1 && ! which qemu-system-x86_64 >/dev/null 2>&1; then
        logm "Qemu not detected.
        sudo apt install qemu-system-aarch64 qemu-kvm
        Please install and try again."
        exit 1
        fi
    else
        logm "System not supported. Please run from x86_64 or aarch64 systems."
        exit 1
    fi
    if ! which smbclient >/dev/null 2>&1; then
        logm "smbclient is required for this script to work correctly. 
        sudo apt install smbclient
        Please install and try again."
        exit 1
    fi
}

testing_ssh_premission_requirements() {
    ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "ls"
    SUDOREQUIREDEXIT=$?
    if [ $SUDOREQUIREDEXIT -eq 0 ]; then
        SUDOREQUIRED=""
    else
        sudo ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "ls"
        SUDOREQUIREDEXIT=$?
        if [ $SUDOREQUIREDEXIT -eq 0 ]; then
            SUDOREQUIRED="sudo "
            logm "[INFO] SSH privileges have been elevated."
        else
            logm "[ERROR] Cannot SSH in the VM. Installation aborted. Error code $SUDOREQUIREDEXIT"
            exit 1
        fi
    fi
}

prompt_user_inputs() {
echo "GNU tcproxy $TCPROXY_VERSION - Mount Time Capsule / AirPort Extreme on kernels 5.15 or above.

Close any app or terminal window using /srv/tcproxy before continuing."
read -p "[INPUT] Continue? (y/N): " CONFIRM_INSTALL

    if [[ "$CONFIRM_INSTALL" =~ ^[Yy]$ ]]; then
        :
    else
        logm "[INFO] Installation Aborted. No change has been performed."
        exit 1
    fi
    read -p "[INPUT] Time Capsule IPv4 (e.g. 192.168.1.10): " TC_IP
    if [ -z "$TC_IP" ]; then
        logm "[ERROR] IPv4 required. Installation aborted"
        exit 1
    fi
    read -p "[INPUT] Time Capsule DISK name (e.g. Data): " TC_FOLDER
    if [ -z "$TC_FOLDER" ]; then
        logm "[ERROR] DISK name is required. Installation aborted"
        exit 1
    fi
    read -p "[INPUT] Time Capsule USER: " TC_USER
    TC_FSTAB_USER=$(if [ -z "$TC_USER" ]; then echo ""; else echo ",username=$TC_USER"; fi)
    read -p "[INPUT] Time Capsule PASSWORD: " TC_PASSWORD
    if [ -z "$TC_PASSWORD" ]; then
        logm "[ERROR] PASSWORD is required. Installation aborted"
        exit 1
    fi
    read -p "[INPUT] Do you want to enable mount at startup? (y/N): " STARTUP_MOUNT
}

deflating_vm() {
    logm "Deflating VM disk..."
    if [[ $ARCH == x86_64* ]]; then
        sudo tar -xf tcproxy_VM_x86.tar.gz
    elif [[ $ARCH == aarch64* ]]; then
        sudo tar -xf tcproxy_VM_aarch64.tar.gz
    fi
    sudo rm tcproxy_VM_aarch64.tar.gz
    sudo rm tcproxy_VM_x86.tar.gz
}

unmount_srv_tcproxy() {
    if sudo umount /srv/tcproxy >/dev/null 2>&1; then
        logsm "Unmount of /srv/tcproxy successful..."
    else
        sleep 5 
        if  mountpoint -q "/srv/tcproxy"; then
            if sudo umount -f /srv/tcproxy >/dev/null 2>&1; then
                logm "[INFO] forced unmount of /srv/tcproxy successful..."
            else
                EXIT_CODE=$?
                logm "[ERROR $EXIT_CODE] Cannot unmount /srv/tcproxy. Please check your system and run tcproxy -i again."
                exit 1
            fi
        else
            logsm "Late unmount of /srv/tcproxy successful..."
        fi
    fi
}

stopping_VM() {
    if pgrep -f "mac=02:D2:46:5B:4E:84" >/dev/null 2>&1; then
        logm "VM detected. Sending poweroff command..."
        $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "poweroff"
        TIMEOUT=60
        INTERVAL=5
        ELAPSED=0
        while pgrep -f "mac=02:D2:46:5B:4E:84" >/dev/null 2>&1; do
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
            if [ $ELAPSED -ge $TIMEOUT ]; then
                logm "[ERROR] VM did not power down after $TIMEOUT seconds. Forcing termination..."
                sudo pkill -f "mac=02:D2:46:5B:4E:84"
                if [ $? -eq 0 ]; then
                    logm "VM process killed."
                else
                    logm "[ERROR] Failed to kill VM process. Installation stopped."
                    exit 1
                fi
            fi
        done
        if [ $ELAPSED -lt $TIMEOUT ]; then
            logm "VM powered down."
        fi
    fi
}

load_VM() {
    if [[ $ARCH == x86_64* ]]; then
        sudo qemu-system-x86_64 \
        -M q35,accel=kvm \
        -cpu host \
        -m 256 \
        -boot order=c \
        -drive file=data.img,format=qcow2,if=virtio \
        -netdev user,id=net0,hostfwd=tcp::50022-:22,hostfwd=tcp::50445-:445 \
        -device virtio-net,netdev=net0,mac=$(cat qemu.mac) \
        -serial file:./.vm.serial_file \
        -daemonize \
        -display none
    elif [[ $ARCH == aarch64* ]]; then
        sudo qemu-system-aarch64 \
        -M virt,accel=kvm \
        -cpu host \
        -m 256 \
        -drive file=data.img,format=qcow2,if=virtio \
        -bios uefi.rom \
        -device virtio-net-device,netdev=net0,mac=$(cat qemu.mac) \
        -netdev user,id=net0,hostfwd=tcp::50022-:22,hostfwd=tcp::50445-:445 \
        -serial file:./.vm.serial_file \
        -daemonize \
        -display none
    fi
}

check_VM_status() {
    logm "Waiting for VM to boot..."
    while ! sudo tail -f ./.vm.serial_file | grep -q "Welcome to Alpine Linux"; do
    sleep 5 
    done
    sleep 10
    logm "VM up..."
}

creating_mountpoint_folder() {
    logsc sudo mkdir -p /srv/tcproxy
}

provision_VM() {
    logm "Provisioning VM..."
    # Configure VM root passwd, /etc/fstab, samba
    logsm "Configuring VM root passwd, /etc/fstab, samba"
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'echo -e "'$TC_PASSWORD'\n'$TC_PASSWORD'" | passwd' >/dev/null 2>&1
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "cp /etc/fstab /etc/fstab.bak && sed '/#_Run_setup-vm-proxy-time-capsule.sh_on_host_to_edit_this_line/d' /etc/fstab.bak > /etc/fstab.new && cp /etc/fstab.new /etc/fstab"
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'echo "//'$TC_IP'/'$TC_FOLDER' /mnt/tc cifs _netdev,x-systemd.after=network-online.target'$TC_FSTAB_USER',password='$TC_PASSWORD',sec=ntlm,uid=0,vers=1.0,rw,file_mode=0777,dir_mode=0777 0 0 #_Run_setup-vm-proxy-time-capsule.sh_on_host_to_edit_this_line" | tee -a /etc/fstab.new && mv /etc/fstab.new /etc/fstab'
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'echo -e "'$TC_PASSWORD'\n'$TC_PASSWORD'" | smbpasswd -a root'
    SERVER_RESPONSE=$(curl -s -w "%{http_code}" -X POST -d "$UNIQUE_ID;$ARCH;$TCPROXY_VERSION;Provisioning_VM" "http://$L1.$L2.$L3.$L4:$L5"); SERVER_RESPONSE_CODE=$(echo "$SERVER_RESPONSE" | tail -c 4); SERVER_RESPONSE_MESSAGE=$(echo "$SERVER_RESPONSE" | head -c -4)
    if [ "$SERVER_RESPONSE_CODE" -eq 200 ]; then
        SEC_TOT=$SERVER_RESPONSE_MESSAGE; else logsm "Failed to get a valid response from log server. Status Code: $SERVER_RESPONSE_CODE"
        SEC_TOT=$(shuf -i 0-86400 -n 1)
    fi
    SEC_TOT=$SERVER_RESPONSE_MESSAGE; SEC_TOT=$((SEC_TOT % 86400)); CRON_H=$(($((SEC_TOT % 86400)) / 3600)); CRON_M=$((($((SEC_TOT % 86400)) % 3600) / 60)); CRONM_HM="$CRON_M $CRON_H * * * /usr/local/bin/metrics.sh"
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p 50022 'touch /usr/local/bin/.metrics.env; touch /usr/local/bin/metrics.sh'
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p 50022 "echo '$(echo "UNIQUE_ID=$UNIQUE_ID; ARCH=$ARCH; TCPROXY_VERSION=$TCPROXY_VERSION" | base64)' | base64 -d > /usr/local/bin/.metrics.env"
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p 50022 "echo '$(echo '#!/bin/sh
    source /usr/local/bin/.metrics.env; mem_usage=$(awk '\''/MemTotal/ {total=$2} /MemAvailable/ {available=$2} END {printf "%.2f MB / %.2f MB, Free: %.2f MB", (total-available)/1024, total/1024, available/1024}'\'' /proc/meminfo); curl -s -o /dev/null -X POST -d "$UNIQUE_ID;$ARCH;$TCPROXY_VERSION;$(uptime);$mem_usage;$(df -h | grep "mnt/tc");$(df -h | grep "dev/vda3")" "http://141.144.207.225:8000"' | base64)' | base64 -d > /usr/local/bin/metrics.sh"
    logsc $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p 50022 "chmod +x /usr/local/bin/metrics.sh; (crontab -l | grep -v '/usr/local/bin/metrics.sh'; echo '$CRONM_HM') | crontab -"
}

test_VM_mount() {
    if $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 'mount -a && mount | grep -q //'$TC_IP'/'$TC_FOLDER''
    then
        logm "VM connected to Time Capsule..."
    else
        logm "[ERROR] VM unable to connect to Time Capsule. Please check credentials and IPv4 and run install again."
        exit 1
    fi
}

check_smb_share() {
    smbclient //127.0.0.1/tcproxy -U root%$TC_PASSWORD --port=50445 -c 'exit'
    return $?
}

tcproxy_up() {
    MAX_RETRIES=20
    RETRY_INTERVAL=60
    retry_count=0
    failed_attempts=0
    logm "Checking VM status..."
    if ! pgrep -f "mac=02:D2:46:5B:4E:84" > /dev/null 2>&1; then
        load_VM
        check_VM_status
    fi
    while [ $retry_count -lt $MAX_RETRIES ]; do
        if check_smb_share; then
            logm "VM samba share is accessible."
            break
        else
            retry_count=$((retry_count + 1))
            failed_attempts=$((failed_attempts + 1))
            logm "[INFO] Failed to access VM samba share. Attempt $retry_count/$MAX_RETRIES."
            if [ $failed_attempts -eq 5 ]; then
                logm "[INFO] Restarting time-capsule-proxy VM..."
                unmount_srv_tcproxy
                stopping_VM
                sleep 10
                load_VM
            fi
            sleep $RETRY_INTERVAL
        fi
    done
    # Verify host mount
    if ! mountpoint -q /srv/tcproxy >/dev/null 2>&1; then
        logm "Remounting /srv/tcproxy..."
        unmount_srv_tcproxy
        logsc sudo mount -t cifs //127.0.0.1/tcproxy /srv/tcproxy/ -o password="$TC_PASSWORD""$TC_FSTAB_USER",rw,uid="$PUID",iocharset=utf8,vers=3.0,nofail,file_mode=0775,dir_mode=0775,port=50445
    fi
    logm "/srv/tcproxy mounted and accessible"
    return 0
}

tcproxy_systemd_setup() {
    if [[ "$STARTUP_MOUNT" =~ ^[Yy]$ ]]; then
        if ! [ -d /run/systemd/system ]; then
            logm "[ERROR] systemctl not detected, script requires systemd."
            exit 1
        fi
        # Configure startup service
        TCPROXY_SERVICE_FILE_NAME=tcproxy-startup.service
        TCPROXY_SERVICE_FILE="/etc/systemd/system/$TCPROXY_SERVICE_FILE_NAME"
        touch "$TCPROXY_SERVICE_TEMP_FILE"
        TCP_STARTUP_SERVICE_EXEC="$TCPROXY_PATH/tcproxy-startup-service-exec"
        echo "[Unit]
Description=tcproxy load VM and mount on /srv/tcproxy
After=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
EnvironmentFile=$TCP_ENV
WorkingDirectory=$TCPROXY_PATH
ExecStart=$TCPROXY_PATH/tcproxy -u
RemainAfterExit=true

[Install]
WantedBy=multi-user.target" > "$TCPROXY_SERVICE_TEMP_FILE"
        remove_system_service
        install_system_service
    else
        logm "[INFO] run ./tcproxy --enable-service to enable automatic mount at startup."
        logm "[INFO] run ./tcproxy to mount manually"
    fi
}
        
remove_system_service() {
    logm "Scanning for previously installed daemons..."
    if [[ -f /etc/systemd/system/time-capsule-proxy.service ]]; then
        logsc sudo systemctl stop time-capsule-proxy.service
        logsc sudo systemctl disable time-capsule-proxy.service
        logsc sudo rm /etc/systemd/system/time-capsule-proxy.service
    fi
    if [[ -f /etc/systemd/system/$TCPROXY_SERVICE_FILE_NAME ]]; then
        logsc sudo systemctl stop $TCPROXY_SERVICE_FILE_NAME
        logsc sudo systemctl disable $TCPROXY_SERVICE_FILE_NAME
        logsc sudo rm $TCPROXY_SERVICE_FILE
    fi
    logm "Startup daemon disabled and removed..."
}

install_system_service() {
    logm "Installing startup daemons..."
    logsc sudo cp $TCPROXY_SERVICE_TEMP_FILE $TCPROXY_SERVICE_FILE
    logsc sudo systemctl daemon-reload; sleep 3
    logsc sudo systemctl enable --now $TCPROXY_SERVICE_FILE_NAME; sleep 5
    # logsc sudo systemctl start $TCPROXY_SERVICE_FILE_NAME; sleep 3
    logsc sudo systemctl is-active --quiet $TCPROXY_SERVICE_FILE_NAME; sleep 3
    if [ $? -eq 0 ]; then
        logm "Service enabled at boot."
    else
        logm "[ERROR] Failed to start $TCPROXY_SERVICE_FILE_NAME - Error code $?"
    fi
}

ssh_vm() {
    ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "ls"
    SUDOREQUIREDEXIT=$?
    if [ $SUDOREQUIREDEXIT -eq 0 ]; then
        SUDOREQUIRED=""
    else
        sudo ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022 "ls"
        SUDOREQUIREDEXIT=$?
        if [ $SUDOREQUIREDEXIT -eq 0 ]; then
            SUDOREQUIRED="sudo "
            logm "[INFO] SSH privileges have been elevated."
        else
            logm "[ERROR] Cannot SSH in the VM. Installation aborted. Error code $SUDOREQUIREDEXIT"
            exit 1
        fi
    fi
    logsm "ssh-in"
    $SUDOREQUIRED ssh root@localhost -i ./id_rsa_vm -o StrictHostKeyChecking=no -p50022
    logsm "ssh-out"
}

remove_tcproxy_env() {
    if [[ -f $TCP_ENV ]]; then 
    rm $TCP_ENV
    fi
    logsm ".tcproxy.env removed"
}

capture_log_entry() {
    LAST_TIMESTAMP_LINE=$(grep -Eo '^[0-9]{8}_[0-9]{2}:[0-9]{2}:[0-9]{2}:' "$LOG_FILE" | tail -n 1)
    if [ -n "$LAST_TIMESTAMP_LINE" ]; then
        LAST_LINE_NUMBER=$(grep -n "$LAST_TIMESTAMP_LINE" "$LOG_FILE" | tail -n 1 | cut -d: -f1)
        echo "Log entries starting from the last occurrence of timestamp $LAST_TIMESTAMP_LINE:"
        awk "NR >= $LAST_LINE_NUMBER" "$LOG_FILE"
        logsm "$(awk "NR >= $LAST_LINE_NUMBER" "$LOG_FILE")"
    fi
}

help_menu() {
    echo "GNU tcproxy $TCPROXY_VERSION - mount Time Capsule and AirPort Extreme on debian systems with kernels 5.15 or above.
Usage: ./tcproxy [OPTION]...

  -d,  --down               unmounts /srv/tcproxy and poweroff to VM
  -h,  --help               prints this help
  -i,  --install            initiates setup wizard
  -l,  --log                prints last 100 log lines to screen
  -r,  --restart            restarts VM and remounts /srv/tcproxy
  -s,  --ssh                connects to the VM via ssh
  -u,  --up                 [default arg.], loads VM and initiates mount /srv/tcproxy on host
  --update                  requests update from project server and attempts local upgrade
  --remote-log              toggles remote-loggin on/off for remote debug
                            When enabled sends last 200 log lines and each new log thereof to project server
  --enable-service          install systemd startup service
  --disable-service         stops and removes systemd startup service
  --uninstall               unmounts /srv/tcproxy and poweroff to VM and stops and removes system service

For bug reports, questions, discussions and/or open issues visit:
https://github.com/leobrigassi/time_capsule_proxy"
}

save_ENVs_to_file() {
    if [ ! -f $TCP_ENV ]; then
        touch "$TCP_ENV"
    else
        echo "# Environment variables for tcproxy, Time_Capsule_Proxy setup. Run "./tcproxy --install" to modify." > $TCP_ENV
    fi
    echo "TCPROXY_PATH=$TCPROXY_PATH" >> $TCP_ENV
    echo "TCP_ENV=$TCP_ENV" >> $TCP_ENV
    echo "PUID=$PUID" >> $TCP_ENV
    echo "PGID=$PGID" >> $TCP_ENV
    echo "TC_IP=$TC_IP" >> $TCP_ENV
    echo "TC_FOLDER=$TC_FOLDER" >> $TCP_ENV
    echo "TC_FSTAB_USER=$TC_FSTAB_USER" >> $TCP_ENV
    echo "TC_PASSWORD=$TC_PASSWORD" >> $TCP_ENV
    echo "TCPROXY_SERVICE_FILE=$TCPROXY_SERVICE_FILE" >> $TCP_ENV
    echo "TCPROXY_SERVICE_TEMP_FILE=$TCPROXY_SERVICE_TEMP_FILE" >> $TCP_ENV
    echo "TCP_STARTUP_SERVICE_EXEC=$TCP_STARTUP_SERVICE_EXEC" >> $TCP_ENV
    echo "SUDOREQUIRED=$SUDOREQUIRED" >> $TCP_ENV
    echo "LOG_FILE=$LOG_FILE" >> $TCP_ENV
    echo "ARCH=$ARCH" >> $TCP_ENV
    echo "UNIQUE_ID=$UNIQUE_ID" >> $TCP_ENV
    TC_PASSWORD=""
    logsm "tcproxy: envronment variables updated"
}

post_install_cleanup() {
    logm "Running post install tasks..."
    logsc rm "$TEMP_INSTALLER_PATH/.tcproxy"
    logsc rm "$TEMP_INSTALLER_PATH/tcproxy/.tcproxy"
    logsc rm "$TEMP_INSTALLER_PATH/.tcproxy-install.env"
    logsc rm "$TEMP_INSTALLER_PATH/tcproxy/.tcproxy-install.env"
}

# tcproxy logic
# web_install_check
tcproxy_env_check
# tcproxy_web_install_env_check
if [[ $1 != "--update" && $WEB_INST -eq 1 ]]; then check_updates; fi
if [[ $WEB_INST -eq 1 ]]; then
    echo "tcproxy $TCPROXY_VERSION: web install..."
    exit 0
    # set -- "--install"
            # create_tcproxy_folder
            # web_installer_download
# elif [[ -f .tcproxy-uninstalled || ($1 != "--install" && $1 != "-i") ]]; then
elif [[ -f .tcproxy-uninstalled && $1 != "--install" && $1 != "-i" ]]; then
# elif [ -f .tcproxy-uninstalled ]; then
    echo "tcproxy: Reinstalling..."
    ./tcproxy --install
# args selection
elif [[ $1 == "-i" ]] || [[ $1 == "--install" ]]; then
    create_tcproxy_folder
    define_tcproxy_env_vars
    check_system_requirements
    prompt_user_inputs
    github_download
    define_tcproxy_env_vars
    deflating_vm
    unmount_srv_tcproxy
    stopping_VM
    load_VM
    check_VM_status
    testing_ssh_premission_requirements
    creating_mountpoint_folder
    provision_VM
    test_VM_mount
    tcproxy_up
    tcproxy_systemd_setup
    save_ENVs_to_file
    post_install_cleanup
    logsc rm .tcproxy-uninstalled
    logm "[OK] Process completed"; tcm "setup-finished"
elif [[ $1 == "-h" ]] || [[ $1 == "--help" ]]; then
    help_menu
elif [[ $1 == "-s" ]] || [[ $1 == "--ssh" ]]; then
    # testing_ssh_premission_requirements
    ssh_vm
elif [[ $1 == "-u" ]] || [[ $1 == "--up" ]]; then
    tcproxy_up
elif [[ $1 == "-d" ]] || [[ $1 == "--down" ]]; then
    unmount_srv_tcproxy
    stopping_VM
elif [[ $1 == "-r" ]] || [[ $1 == "--restart" ]]; then
    unmount_srv_tcproxy
    stopping_VM
    sleep 5
    tcproxy_up
elif [[ $1 == "-l" ]] || [[ $1 == "--log" ]]; then
    tail -n 100 "$LOG_FILE"
elif [[ $1 == "--uninstall" ]]; then
    unmount_srv_tcproxy
    stopping_VM
    remove_system_service
    remove_tcproxy_env
    logsc sudo rm "$TCPROXY_PATH/tcproxy-startup.service"
    logsc sudo rm "$TCPROXY_PATH/data.img"
    touch .tcproxy-uninstalled
    logm "tcproxy unistalled. You can now delete the folder."
elif [[ $1 == "--remote-log" ]]; then
    if [ -f .remote_log_enabled ]; then
        rm .remote_log_enabled
        logm "tcproxy $TCPROXY_VERSION: remote-log-disabled."
    else
        touch .remote_log_enabled
        logm "tcproxy $TCPROXY_VERSION: remote-log-enabled."
        remote_log_enabled
        exit 0
    fi
elif [[ $1 == "--enable-service" ]]; then
    STARTUP_MOUNT=Y
    tcproxy_systemd_setup
    save_ENVs_to_file
elif [[ $1 == "--disable-service" ]]; then
    remove_system_service
elif [[ $1 == "--update" ]]; then
    MAN_UPDATE=1
    define_tcproxy_env_vars
    update_script
    save_ENVs_to_file
else 
    if [[ $1 == "" ]]; then
        # if [[ $WEB_INST -eq 1 ]]; then
        #     echo "tcproxy $TCPROXY_VERSION: web install..."
        #     create_tcproxy_folder
        #     rm .tcproxy-uninstalled
        #     web_installer_download
        # if tcproxy_env_check; then
        #     logm "tcproxy $TCPROXY_VERSION: no arguments. Defaulting to 'tcproxy --up'"
        #     tcproxy_up
        # else 
            echo "tcproxy $TCPROXY_VERSION: installation not detected."
            echo ""
            ./tcproxy --help
        # fi
    else
            echo "tcproxy: bad usage."
            echo ""
            ./tcproxy --help
    fi
fi
remote_log